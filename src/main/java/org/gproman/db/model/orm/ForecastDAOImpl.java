/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import static org.gproman.db.DBUtil.getIntOrNull;
import static org.gproman.db.DBUtil.setIntParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.model.dao.ForecastDAO;
import org.gproman.db.model.dao.IdGeneratorDAO;
import org.gproman.model.race.Forecast;
import org.gproman.model.race.Weather;

/**
 * This class provides methods to populate DB Table of LAP
 */
public class ForecastDAOImpl implements ForecastDAO {
    
    public static final ForecastDAO INSTANCE = new ForecastDAOImpl();
    
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO FORECAST ("
        + "ID, WEATHER, TEMP_MIN, TEMP_MAX, HUMIDITY_MIN, HUMIDITY_MAX, RAIN_MIN, RAIN_MAX "
        + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "ID, WEATHER, TEMP_MIN, TEMP_MAX, HUMIDITY_MIN, HUMIDITY_MAX, RAIN_MIN, RAIN_MAX "
        + "FROM FORECAST WHERE "
        + "ID = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE FORECAST SET "
        + "WEATHER = ?, TEMP_MIN = ?, TEMP_MAX = ?, HUMIDITY_MIN = ?, HUMIDITY_MAX = ?, RAIN_MIN = ?, RAIN_MAX = ? "
        + "WHERE "
        + "ID = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM FORECAST WHERE "
        + "ID = ?";
    
    private ForecastDAOImpl() {}

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Forecast forecast, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            forecast.setId( IdGeneratorDAO.INSTANCE.getNextId( conn ) );
            
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, forecast.getId());
            ps.setString(2, forecast.getWeather() != null ? forecast.getWeather().toString() : null );
            setIntParameter( ps, 3, forecast.getTempMin());
            setIntParameter( ps, 4, forecast.getTempMax());
            setIntParameter( ps, 5, forecast.getHumidityMin());
            setIntParameter( ps, 6, forecast.getHumidityMax());
            setIntParameter( ps, 7, forecast.getRainMin());
            setIntParameter( ps, 8, forecast.getRainMax());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrieved.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Forecast load(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<Forecast> results = getResults(rs, conn);
            if (results.size() > 0)
                return (Forecast) results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Forecast forecast, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, forecast.getWeather() != null ? forecast.getWeather().toString() : null);
            setIntParameter( ps, 2, forecast.getTempMin());
            setIntParameter( ps, 3, forecast.getTempMax());
            setIntParameter( ps, 4, forecast.getHumidityMin());
            setIntParameter( ps, 5, forecast.getHumidityMax());
            setIntParameter( ps, 6, forecast.getRainMin());
            setIntParameter( ps, 7, forecast.getRainMax());
            ps.setInt(8, forecast.getId());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<Forecast> getResults(ResultSet rs, Connection conn ) throws SQLException {
        List<Forecast> results = new ArrayList<Forecast>();
        while (rs.next()) {
            Forecast forecast = new Forecast();
            forecast.setId(rs.getInt("ID"));
            String weather = rs.getString("WEATHER");
            forecast.setWeather(weather != null ? Weather.valueOf( weather ) : null );
            forecast.setTempMin( getIntOrNull( rs, "TEMP_MIN" ) );
            forecast.setTempMax( getIntOrNull( rs, "TEMP_MAX" ) );
            forecast.setHumidityMin( getIntOrNull( rs, "HUMIDITY_MIN" ) );
            forecast.setHumidityMax( getIntOrNull( rs, "HUMIDITY_MAX" ) );
            forecast.setRainMin( getIntOrNull( rs, "RAIN_MIN" ) );
            forecast.setRainMax( getIntOrNull( rs, "RAIN_MAX" ) );
            results.add(forecast);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}