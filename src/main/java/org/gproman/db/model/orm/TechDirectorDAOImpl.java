/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.DBUtil;
import org.gproman.db.model.dao.IdGeneratorDAO;
import org.gproman.db.model.dao.TechDirectorDAO;
import org.gproman.model.staff.TechDirector;

/**
 * This class provides methods to populate DB Table of DRIVER
 */
public class TechDirectorDAOImpl
        implements
        TechDirectorDAO {

    public static final TechDirectorDAO INSTANCE   = new TechDirectorDAOImpl();

    /* SQL to insert data */
    private static final String   SQL_INSERT =
                                                     "INSERT INTO TECH_DIRECTOR ("
                                                             + "ID, DATETIME, NUMBER, NAME, NATIONALITY, GPS, TROPHIES, WINS, CONTRACT, SALARY, " 
                                                             + "POINTS_BONUS, PODIUM_BONUS, WIN_BONUS, TROPHY_BONUS, OVERALL, LEADERSHIP, "
                                                             + "RD_MECH, RD_ELECT, RD_AERO, EXPERIENCE, PIT_COORD, MOTIVATION, AGE "
                                                             + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    
    /* SQL to select data */
    private static final String   SQL_SELECT =
                                                     "SELECT "
                                                             + "ID, DATETIME, NUMBER, NAME, NATIONALITY, GPS, TROPHIES, WINS, CONTRACT, SALARY, " 
                                                             + "POINTS_BONUS, PODIUM_BONUS, WIN_BONUS, TROPHY_BONUS, OVERALL, LEADERSHIP, "
                                                             + "RD_MECH, RD_ELECT, RD_AERO, EXPERIENCE, PIT_COORD, MOTIVATION, AGE "
                                                             + "FROM TECH_DIRECTOR WHERE "
                                                             + "ID = ?";

    /* SQL to update data */
    private static final String   SQL_UPDATE =
                                                     "UPDATE TECH_DIRECTOR SET "
                                                             + "DATETIME = ?, NUMBER = ?, NAME = ?, NATIONALITY = ?, GPS = ?, TROPHIES = ?, WINS = ?, CONTRACT = ?, SALARY = ?, " 
                                                             + "POINTS_BONUS = ?, PODIUM_BONUS = ?, WIN_BONUS = ?, TROPHY_BONUS = ?, OVERALL = ?, LEADERSHIP = ?, "
                                                             + "RD_MECH = ?, RD_ELECT = ?, RD_AERO = ?, EXPERIENCE = ?, PIT_COORD = ?, MOTIVATION = ?, AGE = ?"
                                                             + "WHERE "
                                                             + "ID = ?";

    /* SQL to delete data */
    private static final String   SQL_DELETE =
                                                     "DELETE FROM TECH_DIRECTOR WHERE "
                                                             + "ID = ?";

    private TechDirectorDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param td   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(TechDirector td,
                       Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            td.setId( IdGeneratorDAO.INSTANCE.getNextId( conn ) );
            int index = 1;
            ps = conn.prepareStatement( SQL_INSERT );
            ps.setInt( index++, td.getId() );
            ps.setTimestamp( index++, td.getDatetime() );
            ps.setInt( index++, td.getNumber() );
            ps.setString( index++, td.getName() );
            ps.setString( index++, td.getNationality() );
            ps.setInt( index++, td.getGps() );
            ps.setInt( index++, td.getTrophies() );
            ps.setInt( index++, td.getWins() );
            ps.setInt( index++, td.getContract() );
            ps.setInt( index++, td.getSalary() );
            ps.setInt( index++, td.getPointsBonus() );
            ps.setInt( index++, td.getPodiumBonus() );
            ps.setInt( index++, td.getWinBonus() );
            ps.setInt( index++, td.getTrophyBonus() );
            ps.setInt( index++, td.getAttributes().getOverall() );
            ps.setInt( index++, td.getAttributes().getLeadership() );
            ps.setInt( index++, td.getAttributes().getRdMech() );
            ps.setInt( index++, td.getAttributes().getRdElect() );
            ps.setInt( index++, td.getAttributes().getRdAero() );
            ps.setInt( index++, td.getAttributes().getExperience() );
            ps.setInt( index++, td.getAttributes().getPitCoord() );
            ps.setInt( index++, td.getAttributes().getMotivation() );
            ps.setInt( index++, td.getAttributes().getAge() );
            ps.executeUpdate();
        } finally {
            close( ps );
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public TechDirector load(Integer key,
                       Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement( SQL_SELECT );
            ps.setInt( 1, key );
            rs = ps.executeQuery();
            List<TechDirector> results = getResults( rs, conn );
            if ( results.size() > 0 ) return results.get( 0 );
            else return null;
        } finally {
            close( rs );
            close( ps );
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(TechDirector td,
                      Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            TechDirector saved = load( td.getId(), conn );
            int result = 0;
            if ( saved != null ) {
                ps = conn.prepareStatement( SQL_UPDATE );
                int index = 1;
                ps.setTimestamp( index++, td.getDatetime() );
                ps.setInt( index++, td.getNumber() );
                ps.setString( index++, td.getName() );
                ps.setString( index++, td.getNationality() );
                ps.setInt( index++, td.getGps() );
                ps.setInt( index++, td.getTrophies() );
                ps.setInt( index++, td.getWins() );
                ps.setInt( index++, td.getContract() );
                ps.setInt( index++, td.getSalary() );
                ps.setInt( index++, td.getPointsBonus() );
                ps.setInt( index++, td.getPodiumBonus() );
                ps.setInt( index++, td.getWinBonus() );
                ps.setInt( index++, td.getTrophyBonus() );
                ps.setInt( index++, td.getAttributes().getOverall() );
                ps.setInt( index++, td.getAttributes().getLeadership() );
                ps.setInt( index++, td.getAttributes().getRdMech() );
                ps.setInt( index++, td.getAttributes().getRdElect() );
                ps.setInt( index++, td.getAttributes().getRdAero() );
                ps.setInt( index++, td.getAttributes().getExperience() );
                ps.setInt( index++, td.getAttributes().getPitCoord() );
                ps.setInt( index++, td.getAttributes().getMotivation() );
                ps.setInt( index++, td.getAttributes().getAge() );
                ps.setInt( index++, td.getId() );
                result = ps.executeUpdate();
            }
            return result;
        } finally {
            close( ps );
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key,
                       Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement( SQL_DELETE );
            ps.setInt( 1, key );
            ps.executeUpdate();
        } finally {
            close( ps );
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<TechDirector> getResults(ResultSet rs,
                                    Connection conn) throws SQLException {
        List<TechDirector> results = new ArrayList<TechDirector>();
        while ( rs.next() ) {
            TechDirector td = new TechDirector();
            td.setId( rs.getInt( "ID" ) );
            td.setDatetime( rs.getTimestamp( "DATETIME" ) );
            td.setNumber( rs.getInt( "NUMBER" ) );
            td.setName( rs.getString( "NAME" ) );
            td.setNationality( rs.getString( "NATIONALITY" ) );
            td.setGps( DBUtil.getIntOrNull( rs, "GPS" ) );
            td.setTrophies( DBUtil.getIntOrNull( rs, "TROPHIES" ) );
            td.setWins( DBUtil.getIntOrNull( rs, "WINS" ) );
            td.setContract( DBUtil.getIntOrNull( rs, "CONTRACT" ) );
            td.setSalary( DBUtil.getIntOrNull( rs, "SALARY" ) );
            td.setPointsBonus( DBUtil.getIntOrNull( rs, "POINTS_BONUS" ) );
            td.setPodiumBonus( DBUtil.getIntOrNull( rs, "PODIUM_BONUS" ) );
            td.setWinBonus( DBUtil.getIntOrNull( rs, "WIN_BONUS" ) );
            td.setTrophyBonus( DBUtil.getIntOrNull( rs, "TROPHY_BONUS" ) );

            td.getAttributes().setOverall( DBUtil.getIntOrNull( rs, "OVERALL" ) );
            td.getAttributes().setLeadership(  DBUtil.getIntOrNull( rs, "LEADERSHIP" ) );
            td.getAttributes().setRdMech( DBUtil.getIntOrNull( rs, "RD_MECH" ) );
            td.getAttributes().setRdElect( DBUtil.getIntOrNull( rs, "RD_ELECT" ) );
            td.getAttributes().setRdAero( DBUtil.getIntOrNull( rs, "RD_AERO" ) );
            td.getAttributes().setExperience( DBUtil.getIntOrNull( rs, "EXPERIENCE" ) );
            td.getAttributes().setPitCoord( DBUtil.getIntOrNull( rs, "PIT_COORD" ) );
            td.getAttributes().setMotivation( DBUtil.getIntOrNull( rs, "MOTIVATION" ) );
            td.getAttributes().setAge( DBUtil.getIntOrNull( rs, "AGE" ) );
            results.add( td );
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if ( stmt != null ) {
            try {
                stmt.close();
            } catch ( SQLException e ) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if ( rs != null ) {
            try {
                rs.close();
            } catch ( SQLException e ) {
            }
        }
    }
}