/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import static org.gproman.db.DBUtil.getIntOrNull;
import static org.gproman.db.DBUtil.setIntParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.model.dao.CarSettingsDAO;
import org.gproman.db.model.dao.IdGeneratorDAO;
import org.gproman.db.model.dao.LapDAO;
import org.gproman.model.race.Lap;
import org.gproman.model.race.Weather;

/**
 * This class provides methods to populate DB Table of LAP
 */
public class LapDAOImpl implements LapDAO {
    
    public static final LapDAO INSTANCE = new LapDAOImpl();
    
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO LAP ("
        + "ID, NUMBER, POSITION, TIME, MISTAKE, NETTIME, WEATHER, "
        + "TEMPERATURE, HUMIDITY, SETTINGS_ID, COMMENTS, EVENTS"
        + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "ID, NUMBER, POSITION, TIME, MISTAKE, NETTIME, WEATHER, "
        + "TEMPERATURE, HUMIDITY, SETTINGS_ID, COMMENTS, EVENTS "
        + "FROM LAP WHERE "
        + "ID = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE LAP SET "
        + "NUMBER = ?, POSITION = ?, TIME = ?, MISTAKE = ?, NETTIME = ?, WEATHER = ?, TEMPERATURE = ?,  "
        + "HUMIDITY = ?, SETTINGS_ID = ?, COMMENTS = ?, EVENTS = ? "
        + "WHERE "
        + "ID = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM LAP WHERE "
        + "ID = ?";
    
    private CarSettingsDAO settingsDAO = CarSettingsDAOImpl.INSTANCE;
    
    private LapDAOImpl() {}

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Lap bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            settingsDAO.create( bean.getSettings(), conn );
            
            bean.setId( IdGeneratorDAO.INSTANCE.getNextId( conn ) );
            
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, bean.getId());
            setIntParameter( ps, 2, bean.getNumber());
            setIntParameter( ps, 3, bean.getPosition());
            setIntParameter( ps, 4, bean.getTime());
            setIntParameter( ps, 5, bean.getMistake());
            setIntParameter( ps, 6, bean.getNetTime());
            ps.setString(7, bean.getWeather() != null ? bean.getWeather().toString() : null );
            setIntParameter( ps, 8, bean.getTemperature());
            setIntParameter( ps, 9, bean.getHumidity());
            setIntParameter( ps, 10, bean.getSettings().getId());
            ps.setString(11, bean.getComments());
            ps.setString(12, bean.getEvents());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Lap load(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<Lap> results = getResults(rs, conn);
            if (results.size() > 0)
                return (Lap) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Lap bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            settingsDAO.update( bean.getSettings(), conn );
            
            ps = conn.prepareStatement(SQL_UPDATE);
            setIntParameter( ps, 1, bean.getNumber());
            setIntParameter( ps, 2, bean.getPosition());
            setIntParameter( ps, 3, bean.getTime());
            setIntParameter( ps, 4, bean.getMistake());
            setIntParameter( ps, 5, bean.getNetTime());
            ps.setString(6, bean.getWeather() != null ? bean.getWeather().toString() : null);
            setIntParameter( ps, 7, bean.getTemperature());
            setIntParameter( ps, 8, bean.getHumidity());
            setIntParameter( ps, 9, bean.getSettings().getId());
            ps.setString(10, bean.getComments());
            ps.setString(11, bean.getEvents());
            ps.setInt(12, bean.getId());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            Lap lap = load( key, conn );
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
            
            settingsDAO.delete( lap.getSettings().getId(), conn );
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<Lap> getResults(ResultSet rs, Connection conn ) throws SQLException {
        List<Lap> results = new ArrayList<Lap>();
        while (rs.next()) {
            Lap bean = new Lap();
            bean.setId(rs.getInt("ID"));
            bean.setNumber( getIntOrNull( rs, "NUMBER"));
            bean.setPosition( getIntOrNull( rs, "POSITION") );
            bean.setTime( getIntOrNull( rs, "TIME"));
            bean.setMistake( getIntOrNull( rs, "MISTAKE"));
            bean.setNetTime( getIntOrNull( rs, "NETTIME"));
            String weather = rs.getString("WEATHER");
            bean.setWeather(weather != null ? Weather.valueOf( weather ) : null );
            bean.setTemperature( getIntOrNull( rs, "TEMPERATURE"));
            bean.setHumidity( getIntOrNull( rs, "HUMIDITY"));
            bean.setComments(rs.getString("COMMENTS"));
            bean.setEvents(rs.getString("EVENTS"));

            bean.setSettings( settingsDAO.load( rs.getInt("SETTINGS_ID"), conn ) );
            
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}