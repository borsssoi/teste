/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:51 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.everest.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.everest.dao.EverestLapDAO;
import org.gproman.db.everest.dao.EverestRaceLapDAO;
import org.gproman.model.everest.NormalizedLap;

/**
 * This class provides methods to populate DB Table of RACE_LAP
 */
public class EverestRaceLapDAOImpl implements EverestRaceLapDAO {

    public static final EverestRaceLapDAO INSTANCE                   = new EverestRaceLapDAOImpl();

    /* SQL to insert data */
    private static final String           SQL_INSERT                 =
                                                                             "INSERT INTO RACE_LAP ("
                                                                                     + "RACE_ID, LAP_ID"
                                                                                     + ") VALUES (?, ?)";

    /* SQL to select data */
    private static final String           SQL_SELECT                 =
                                                                             "SELECT "
                                                                                     + "RACE_ID, LAP_ID "
                                                                                     + "FROM RACE_LAP WHERE "
                                                                                     + "RACE_ID = ?";

    /* SQL to delete data */
    private static final String           SQL_DELETE                 =
                                                                             "DELETE FROM RACE_LAP WHERE "
                                                                                     + "RACE_ID = ? AND LAP_ID = ?";

    private static final String           SQL_DELETE_LAPS_FOR_RACE_1 =
                                                                             "DELETE FROM LAP WHERE "
                                                                                     + "ID IN (SELECT LAP_ID FROM RACE_LAP WHERE RACE_ID = ? )";

    private static final String           SQL_DELETE_LAPS_FOR_RACE_2 =
                                                                             "DELETE FROM RACE_LAP WHERE "
                                                                                     + "RACE_ID = ?";

    private EverestLapDAO                 lapDAO                     = EverestLapDAOImpl.INSTANCE;

    private EverestRaceLapDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Integer raceId, Integer lapId, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, raceId);
            ps.setInt(2, lapId);
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Retrieve a record from Database.
     * @param beanKey   The PK Object to be retrieved.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public List<NormalizedLap> loadLapsForRace(Integer raceId, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, raceId);
            rs = ps.executeQuery();
            List<NormalizedLap> results = getResults(rs, conn);
            return results;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer raceId, Integer lapId, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, raceId);
            ps.setInt(2, lapId);
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    @Override
    public void deleteLapsForRace(Integer raceId,
            Connection conn) throws SQLException {
        PreparedStatement ps1 = null;
        PreparedStatement ps2 = null;
        try {
            ps1 = conn.prepareStatement(SQL_DELETE_LAPS_FOR_RACE_1);
            ps1.setInt(1, raceId);
            ps1.executeUpdate();

            ps2 = conn.prepareStatement(SQL_DELETE_LAPS_FOR_RACE_2);
            ps2.setInt(1, raceId);
            ps2.executeUpdate();
        } finally {
            close(ps1);
            close(ps2);
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<NormalizedLap> getResults(ResultSet rs, Connection conn) throws SQLException {
        List<NormalizedLap> results = new ArrayList<NormalizedLap>();
        while (rs.next()) {
            Integer lapId = rs.getInt("LAP_ID");
            NormalizedLap lap = lapDAO.load(lapId, conn);
            results.add(lap);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }
}