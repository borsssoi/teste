/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:51 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.model.dao.IdGeneratorDAO;
import org.gproman.db.model.dao.SeasonDAO;
import org.gproman.model.season.Season;
import org.gproman.model.season.TyreSupplier;

/**
 * This class provides methods to populate DB Table of SEASON
 */
public class SeasonDAOImpl
        implements
        SeasonDAO {

    public static final SeasonDAO INSTANCE                    = new SeasonDAOImpl();

    /* SQL to insert data */
    private static final String   SQL_INSERT                  =
                                                                      "INSERT INTO SEASON ("
                                                                              + "ID, NUMBER, TYRE_SUP, GROUP_NAME, MANAGER_NAME "
                                                                              + ") VALUES (?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String   SQL_SELECT                  =
                                                                      "SELECT "
                                                                              + "ID, NUMBER, TYRE_SUP, GROUP_NAME, MANAGER_NAME "
                                                                              + "FROM SEASON WHERE "
                                                                              + "ID = ?";

    private static final String   SQL_SELECT_FOR_REPORT       =
                                                                      "SELECT NUMBER FROM SEASON ORDER BY NUMBER DESC";

    private static final String   SQL_SELECT_WITH_NULL_GROUPS =
                                                                      "SELECT "
                                                                              + "ID, NUMBER, TYRE_SUP, GROUP_NAME, MANAGER_NAME "
                                                                              + "FROM SEASON WHERE "
                                                                              + "GROUP_NAME is null";

    private static final String   SQL_SELECT_BY_NUMBER        =
                                                                      "SELECT "
                                                                              + "ID, NUMBER, TYRE_SUP, GROUP_NAME, MANAGER_NAME "
                                                                              + "FROM SEASON WHERE "
                                                                              + "MANAGER_NAME = ? AND NUMBER = ?";

    /* SQL to update data */
    private static final String   SQL_UPDATE                  =
                                                                      "UPDATE SEASON SET "
                                                                              + "NUMBER = ?, "
                                                                              + "TYRE_SUP = ?, "
                                                                              + "GROUP_NAME = ?, "
                                                                              + "MANAGER_NAME = ? "
                                                                              + "WHERE "
                                                                              + "ID = ?";

    /* SQL to delete data */
    private static final String   SQL_DELETE                  =
                                                                      "DELETE FROM SEASON WHERE "
                                                                              + "ID = ?";

    private SeasonDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Season bean,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            bean.setId(IdGeneratorDAO.INSTANCE.getNextId(conn));
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, bean.getId());
            ps.setInt(2, bean.getNumber());
            if (bean.getSupplier() != null) {
                ps.setString(3, bean.getSupplier().toString());
            } else {
                ps.setNull(3, Types.VARCHAR);
            }
            ps.setString(4, bean.getGroupName());
            ps.setString(5, bean.getManagerName());
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Season load(Integer seasonId,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, seasonId);
            rs = ps.executeQuery();
            List<Season> results = getResults(rs);
            if (results.size() > 0)
                return (Season) results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Retrieve season numbers from Database.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public List<Integer> loadSeasonsForSetup(Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_FOR_REPORT);
            rs = ps.executeQuery();
            List<Integer> seasons = new ArrayList<Integer>();
            while (rs.next()) {
                seasons.add(rs.getInt("NUMBER"));
            }
            return seasons;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Retrieve season numbers from Database.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public List<Integer> loadSeasonsForTest(Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_FOR_REPORT);
            rs = ps.executeQuery();
            List<Integer> seasons = new ArrayList<Integer>();
            while (rs.next()) {
                seasons.add(rs.getInt("NUMBER"));
            }
            return seasons;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Retrieve season numbers from Database.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public List<Integer> loadSeasonsForTelemetry(Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_FOR_REPORT);
            rs = ps.executeQuery();
            List<Integer> seasons = new ArrayList<Integer>();
            while (rs.next()) {
                seasons.add(rs.getInt("NUMBER"));
            }
            return seasons;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Retrieve season numbers from Database.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public List<Season> loadSeasonsWithNullGroups(Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_WITH_NULL_GROUPS);
            rs = ps.executeQuery();
            List<Season> results = getResults(rs);
            return results;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Season loadSeasonByNumber(String managerName, 
            Integer season,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_BY_NUMBER);
            ps.setString(1, managerName);
            ps.setInt(2, season);
            rs = ps.executeQuery();
            List<Season> results = getResults(rs);
            if (results.size() > 0)
                return (Season) results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(Season bean,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            if( bean.getId() == null ) {
                Season saved = loadSeasonByNumber(bean.getManagerName(), bean.getNumber(), conn);
                if( saved != null) {
                    bean.setId(saved.getId());
                } else {
                    return 0;
                }
            }
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setInt(1, bean.getNumber());
            if (bean.getSupplier() != null) {
                ps.setString(2, bean.getSupplier().toString());
            } else {
                ps.setNull(2, Types.VARCHAR);
            }
            ps.setString(3, bean.getGroupName());
            ps.setString(4, bean.getManagerName());
            ps.setInt(5, bean.getId());
            return ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    @Override
    public void createOrUpdate(Season season,
            Connection conn) throws SQLException {
        if (update(season, conn) == 0) {
            create(season, conn);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer seasonId,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, seasonId);
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<Season> getResults(ResultSet rs) throws SQLException {
        List<Season> results = new ArrayList<Season>();
        while (rs.next()) {
            Season bean = new Season();
            bean.setId(rs.getInt("ID"));
            bean.setNumber(rs.getInt("NUMBER"));
            String supplier = rs.getString("TYRE_SUP");
            bean.setSupplier(supplier != null ? TyreSupplier.determineTyre(supplier) : null);
            bean.setGroupName(rs.getString("GROUP_NAME"));
            bean.setManagerName(rs.getString("MANAGER_NAME"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }
}