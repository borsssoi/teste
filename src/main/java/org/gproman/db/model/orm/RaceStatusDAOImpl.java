/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:51 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.model.dao.IdGeneratorDAO;
import org.gproman.db.model.dao.RaceStatusDAO;
import org.gproman.model.race.RaceStatus;

/**
 * This class provides methods to populate DB Table of RACE_STATUS
 */
public class RaceStatusDAOImpl implements RaceStatusDAO {

    public static final RaceStatusDAO INSTANCE   = new RaceStatusDAOImpl();

    /* SQL to insert data */
    private static final String       SQL_INSERT =
                                                         "INSERT INTO RACE_STATUS ("
                                                                 + "ID, PRACTICE, QUALIFY1, QUALIFY2, SETUP, TELEMETRY, TRACK_INFO, "
                                                                 + "SETUP_PUB, TELEMETRY_PUB, TESTS_PUB "
                                                                 + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String       SQL_SELECT =
                                                         "SELECT "
                                                                 + "ID, PRACTICE, QUALIFY1, QUALIFY2, SETUP, TELEMETRY, TRACK_INFO, "
                                                                 + "SETUP_PUB, TELEMETRY_PUB, TESTS_PUB "
                                                                 + "FROM RACE_STATUS WHERE "
                                                                 + "ID = ?";

    /* SQL to update data */
    private static final String       SQL_UPDATE =
                                                         "UPDATE RACE_STATUS SET "
                                                                 + "PRACTICE = ?, QUALIFY1 = ?, QUALIFY2 = ?, SETUP = ?, TELEMETRY = ?, TRACK_INFO = ?, "
                                                                 + "SETUP_PUB = ?, TELEMETRY_PUB = ?, TESTS_PUB = ? "
                                                                 + "WHERE "
                                                                 + "ID = ?";

    /* SQL to delete data */
    private static final String       SQL_DELETE =
                                                         "DELETE FROM RACE_STATUS WHERE "
                                                                 + "ID = ?";

    private RaceStatusDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(RaceStatus bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            bean.setId(IdGeneratorDAO.INSTANCE.getNextId(conn));
            ps = conn.prepareStatement(SQL_INSERT);
            int index = 1;
            ps.setInt(index++, bean.getId());
            ps.setBoolean(index++, bean.isPractice());
            ps.setBoolean(index++, bean.isQualify1());
            ps.setBoolean(index++, bean.isQualify2());
            ps.setBoolean(index++, bean.isSetup());
            ps.setBoolean(index++, bean.isTelemetry());
            ps.setBoolean(index++, bean.isTrackInfo());
            ps.setTimestamp( index++, bean.getSetupPublished() );
            ps.setTimestamp( index++, bean.getTelemetryPublished() );
            ps.setTimestamp( index++, bean.getTestsPublished() );
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public RaceStatus load(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<RaceStatus> results = getResults(rs);
            if (results.size() > 0)
                return results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(RaceStatus bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            int index = 1;
            ps.setBoolean(index++, bean.isPractice());
            ps.setBoolean(index++, bean.isQualify1());
            ps.setBoolean(index++, bean.isQualify2());
            ps.setBoolean(index++, bean.isSetup());
            ps.setBoolean(index++, bean.isTelemetry());
            ps.setBoolean(index++, bean.isTrackInfo());
            ps.setTimestamp( index++, bean.getSetupPublished() );
            ps.setTimestamp( index++, bean.getTelemetryPublished() );
            ps.setTimestamp( index++, bean.getTestsPublished() );
            ps.setInt(index++, bean.getId());
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<RaceStatus> getResults(ResultSet rs) throws SQLException {
        List<RaceStatus> results = new ArrayList<RaceStatus>();
        while (rs.next()) {
            RaceStatus bean = new RaceStatus();
            bean.setId(rs.getInt("ID"));
            bean.setPractice(rs.getBoolean("PRACTICE"));
            bean.setQualify1(rs.getBoolean("QUALIFY1"));
            bean.setQualify2(rs.getBoolean("QUALIFY2"));
            bean.setSetup(rs.getBoolean("SETUP"));
            bean.setTelemetry(rs.getBoolean("TELEMETRY"));
            bean.setTrackInfo(rs.getBoolean("TRACK_INFO"));
            bean.setSetupPublished(rs.getTimestamp("SETUP_PUB"));
            bean.setTelemetryPublished(rs.getTimestamp("TELEMETRY_PUB"));
            bean.setTestsPublished(rs.getTimestamp("TESTS_PUB"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }
}