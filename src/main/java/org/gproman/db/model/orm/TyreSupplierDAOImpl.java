/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import static org.gproman.db.DBUtil.setIntParameter;
import static org.gproman.db.DBUtil.setStringParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.DBUtil;
import org.gproman.db.model.dao.TyreSupplierDAO;
import org.gproman.model.season.TyreSupplier;
import org.gproman.model.season.TyreSupplierAttrs;

/**
 * This class provides methods to populate DB Table of TEST_SESSION
 */
public class TyreSupplierDAOImpl
        implements
        TyreSupplierDAO {

    public static final TyreSupplierDAO INSTANCE                          = new TyreSupplierDAOImpl();

    /* SQL to insert data */
    private static final String         SQL_INSERT                        =
                                                                                  "INSERT INTO TYRE_SUPPLIER ("
                                                                                          + "SEASON_NUMBER, NAME, DRY, WET, PEAK, "
                                                                                          + "DURABILITY, WARMUP, COST "
                                                                                          + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String         SQL_SELECT                        =
                                                                                  "SELECT "
                                                                                          + "ID, SEASON_NUMBER, NAME, DRY, WET, PEAK, "
                                                                                          + "DURABILITY, WARMUP, COST "
                                                                                          + "FROM TYRE_SUPPLIER T WHERE "
                                                                                          + "ID = ?";

    private static final String         SQL_SELECT_SEASON                 =
                                                                                  "SELECT "
                                                                                          + "ID, SEASON_NUMBER, NAME, DRY, WET, PEAK, "
                                                                                          + "DURABILITY, WARMUP, COST "
                                                                                          + "FROM TYRE_SUPPLIER T WHERE "
                                                                                          + "SEASON_NUMBER = ?";

    private static final String         SQL_SELECT_SUPPLIER_SEASON_NUMBER =
                                                                                  "SELECT "
                                                                                          + "ID, SEASON_NUMBER, NAME, DRY, WET, PEAK, "
                                                                                          + "DURABILITY, WARMUP, COST "
                                                                                          + "FROM TYRE_SUPPLIER T WHERE "
                                                                                          + "SEASON_NUMBER = ? AND NAME = ?";

    /* SQL to update data */
    private static final String         SQL_UPDATE                        =
                                                                                  "UPDATE TYRE_SUPPLIER SET "
                                                                                          + "SEASON_NUMBER = ?, NAME = ?, DRY = ?, WET = ?, PEAK = ?, "
                                                                                          + "DURABILITY = ?, WARMUP = ?, COST = ? "
                                                                                          + "WHERE "
                                                                                          + "ID = ?";

    /* SQL to delete data */
    private static final String         SQL_DELETE                        =
                                                                                  "DELETE FROM TYRE_SUPPLIER WHERE "
                                                                                          + "ID = ?";

    private TyreSupplierDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param td   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(TyreSupplierAttrs bean,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            int index = 1;
            ps = conn.prepareStatement(SQL_INSERT);
            setIntParameter(ps, index++, bean.getSeasonNumber());
            setStringParameter(ps, index++, bean.getSupplier().toString());
            setIntParameter(ps, index++, bean.getDry());
            setIntParameter(ps, index++, bean.getWet());
            setIntParameter(ps, index++, bean.getPeak());
            setIntParameter(ps, index++, bean.getDurability());
            setIntParameter(ps, index++, bean.getWarmup());
            setIntParameter(ps, index++, bean.getCost());
            ps.executeUpdate();

            ResultSet generatedKeys = ps.getGeneratedKeys();
            if (generatedKeys.next()) {
                bean.setId(generatedKeys.getInt(1));
            }
        } finally {
            close(ps);
        }
    }

    /**
     * Retrieve a record from Database.
     * @param beanKey   The PK Object to be retrieved.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public TyreSupplierAttrs load(Integer key,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<TyreSupplierAttrs> results = getResults(rs, conn);
            if (results.size() > 0)
                return results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(TyreSupplierAttrs bean,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            TyreSupplierAttrs saved = loadSupplierBySeasonNumber( bean.getSeasonNumber(), bean.getSupplier().toString(), conn);
            int result = 0;
            if ( saved != null) {
                bean.setId(saved.getId());
                ps = conn.prepareStatement(SQL_UPDATE);
                int index = 1;
                setIntParameter(ps, index++, bean.getSeasonNumber());
                setStringParameter(ps, index++, bean.getSupplier().toString());
                setIntParameter(ps, index++, bean.getDry());
                setIntParameter(ps, index++, bean.getWet());
                setIntParameter(ps, index++, bean.getPeak());
                setIntParameter(ps, index++, bean.getDurability());
                setIntParameter(ps, index++, bean.getWarmup());
                setIntParameter(ps, index++, bean.getCost());
                setIntParameter(ps, index++, bean.getId());
                result = ps.executeUpdate();
            }
            return result;
        } finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<TyreSupplierAttrs> getResults(ResultSet rs,
            Connection conn) throws SQLException {
        List<TyreSupplierAttrs> results = new ArrayList<TyreSupplierAttrs>();
        while (rs.next()) {
            TyreSupplierAttrs bean = new TyreSupplierAttrs();
            bean.setId(rs.getInt("ID"));
            bean.setSeasonNumber(DBUtil.getIntOrNull(rs, "SEASON_NUMBER"));
            bean.setSupplier(TyreSupplier.determineTyre(rs.getString("NAME")));
            bean.setDry(DBUtil.getIntOrNull(rs, "DRY"));
            bean.setWet(DBUtil.getIntOrNull(rs, "WET"));
            bean.setPeak(DBUtil.getIntOrNull(rs, "PEAK"));
            bean.setDurability(DBUtil.getIntOrNull(rs, "DURABILITY"));
            bean.setWarmup(DBUtil.getIntOrNull(rs, "WARMUP"));
            bean.setCost(DBUtil.getIntOrNull(rs, "COST"));

            results.add(bean);
        }
        return results;
    }

    @Override
    public void createOrUpdate(TyreSupplierAttrs bean,
            Connection conn) throws SQLException {
        if (update(bean, conn) == 0) {
            create(bean, conn);
        }
    }

    @Override
    public List<TyreSupplierAttrs> loadSuppliersForSeason(Integer seasonNumber,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_SEASON);
            ps.setInt(1, seasonNumber);
            rs = ps.executeQuery();
            return getResults(rs, conn);
        } finally {
            close(rs);
            close(ps);
        }
    }

    @Override
    public TyreSupplierAttrs loadSupplierBySeasonNumber(Integer seasonNumber, String supplierName, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_SUPPLIER_SEASON_NUMBER);
            ps.setInt(1, seasonNumber);
            ps.setString(2, supplierName);
            rs = ps.executeQuery();
            List<TyreSupplierAttrs> results = getResults(rs, conn);
            if (results.size() > 0)
                return results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }

}