/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.everest.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.everest.dao.EverestCarDAO;
import org.gproman.db.everest.dao.EverestCarPartDAO;
import org.gproman.model.car.Car;
import org.gproman.model.car.CarPart;

/**
 * This class provides methods to populate DB Table of CAR
 */
public class EverestCarDAOImpl implements EverestCarDAO {

    public static final EverestCarDAO INSTANCE   = new EverestCarDAOImpl();

    /* SQL to insert data */
    private static final String       SQL_INSERT =
                                                         "INSERT INTO CAR ("
                                                                 + "POWER, HANDLING, ACCELERATION, BRAKES_PARTID, CHASSIS_PARTID, COOLING_PARTID, "
                                                                 + "ELECTRONICS_PARTID, ENGINE_PARTID, FRONT_WING_PARTID, GEARBOX_PARTID, "
                                                                 + "REAR_WING_PARTID, SIDEPODS_PARTID, SUSPENSION_PARTID, UNDERBODY_PARTID"
                                                                 + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String       SQL_SELECT =
                                                         "SELECT "
                                                                 + "ID, POWER, HANDLING, ACCELERATION, BRAKES_PARTID, CHASSIS_PARTID, COOLING_PARTID, "
                                                                 + "ELECTRONICS_PARTID, ENGINE_PARTID, FRONT_WING_PARTID, GEARBOX_PARTID, "
                                                                 + "REAR_WING_PARTID, SIDEPODS_PARTID, SUSPENSION_PARTID, UNDERBODY_PARTID "
                                                                 + "FROM CAR WHERE "
                                                                 + "ID = ?";

    /* SQL to update data */
    private static final String       SQL_UPDATE =
                                                         "UPDATE CAR SET "
                                                                 + "POWER = ?, HANDLING = ?, ACCELERATION = ?, BRAKES_PARTID = ?, CHASSIS_PARTID = ?, "
                                                                 + "COOLING_PARTID = ?, ELECTRONICS_PARTID = ?, ENGINE_PARTID = ?, FRONT_WING_PARTID = ?, "
                                                                 + "GEARBOX_PARTID = ?, REAR_WING_PARTID = ?, SIDEPODS_PARTID = ?, SUSPENSION_PARTID = ?, "
                                                                 + "UNDERBODY_PARTID = ? "
                                                                 + "WHERE "
                                                                 + "ID = ?";

    /* SQL to delete data */
    private static final String       SQL_DELETE =
                                                         "DELETE FROM CAR WHERE ID = ?";

    private EverestCarPartDAO         partsDAO   = EverestCarPartDAOImpl.INSTANCE;

    private EverestCarDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Car bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            for (CarPart part : bean.getParts()) {
                if( part != null ) {
                    partsDAO.create(part, conn);
                } else {
                    System.out.println("CAR ==> "+bean);
                }
            }
            ps = conn.prepareStatement(SQL_INSERT);
            int index = 1;
            ps.setInt(index++, bean.getPower());
            ps.setInt(index++, bean.getHandling());
            ps.setInt(index++, bean.getAcceleration());
            ps.setInt(index++, bean.getBrakes().getId());
            ps.setInt(index++, bean.getChassis().getId());
            ps.setInt(index++, bean.getCooling().getId());
            ps.setInt(index++, bean.getElectronics().getId());
            ps.setInt(index++, bean.getEngine().getId());
            ps.setInt(index++, bean.getFrontWing().getId());
            ps.setInt(index++, bean.getGearbox().getId());
            ps.setInt(index++, bean.getRearWing().getId());
            ps.setInt(index++, bean.getSidepods().getId());
            ps.setInt(index++, bean.getSuspension().getId());
            ps.setInt(index++, bean.getUnderbody().getId());
            ps.executeUpdate();
            
            ResultSet generatedKeys = ps.getGeneratedKeys();
            if (generatedKeys.next()) {
                bean.setId(generatedKeys.getInt(1));
            }
        } finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Car load(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<Car> results = getResults(rs, conn);
            if (results.size() > 0)
                return (Car) results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(Car bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            if (bean.getId() != null) {
                for (CarPart part : bean.getParts()) {
                    partsDAO.update(part, conn);
                }
                ps = conn.prepareStatement(SQL_UPDATE);
                int index = 1;
                ps.setInt(index++, bean.getPower());
                ps.setInt(index++, bean.getHandling());
                ps.setInt(index++, bean.getAcceleration());
                ps.setInt(index++, bean.getBrakes().getId());
                ps.setInt(index++, bean.getChassis().getId());
                ps.setInt(index++, bean.getCooling().getId());
                ps.setInt(index++, bean.getElectronics().getId());
                ps.setInt(index++, bean.getEngine().getId());
                ps.setInt(index++, bean.getFrontWing().getId());
                ps.setInt(index++, bean.getGearbox().getId());
                ps.setInt(index++, bean.getRearWing().getId());
                ps.setInt(index++, bean.getSidepods().getId());
                ps.setInt(index++, bean.getSuspension().getId());
                ps.setInt(index++, bean.getUnderbody().getId());
                ps.setInt(index++, bean.getId());
                return ps.executeUpdate();
            } else {
                return 0;
            }
        } finally {
            close(ps);
        }
    }

    @Override
    public void createOrUpdate(Car car, Connection conn) throws SQLException {
        if (update(car, conn) == 0) {
            create(car, conn);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @param conn 
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<Car> getResults(ResultSet rs, Connection conn) throws SQLException {
        List<Car> results = new ArrayList<Car>();
        while (rs.next()) {
            Car bean = new Car();
            bean.setId(rs.getInt("ID"));
            bean.setPower(rs.getInt("POWER"));
            bean.setHandling(rs.getInt("HANDLING"));
            bean.setAcceleration(rs.getInt("ACCELERATION"));
            bean.setBrakes(partsDAO.load(rs.getInt("BRAKES_PARTID"), conn));
            bean.setChassis(partsDAO.load(rs.getInt("CHASSIS_PARTID"), conn));
            bean.setCooling(partsDAO.load(rs.getInt("COOLING_PARTID"), conn));
            bean.setElectronics(partsDAO.load(rs.getInt("ELECTRONICS_PARTID"), conn));
            bean.setEngine(partsDAO.load(rs.getInt("ENGINE_PARTID"), conn));
            bean.setFrontWing(partsDAO.load(rs.getInt("FRONT_WING_PARTID"), conn));
            bean.setGearbox(partsDAO.load(rs.getInt("GEARBOX_PARTID"), conn));
            bean.setRearWing(partsDAO.load(rs.getInt("REAR_WING_PARTID"), conn));
            bean.setSidepods(partsDAO.load(rs.getInt("SIDEPODS_PARTID"), conn));
            bean.setSuspension(partsDAO.load(rs.getInt("SUSPENSION_PARTID"), conn));
            bean.setUnderbody(partsDAO.load(rs.getInt("UNDERBODY_PARTID"), conn));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }
}