/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.model.dao.CarPartDAO;
import org.gproman.db.model.dao.IdGeneratorDAO;
import org.gproman.db.model.dao.PartOptionDAO;
import org.gproman.model.car.CarPart;
import org.gproman.model.car.PartOption;

/**
 * This class provides methods to populate DB Table of CAR_PART
 */
public class CarPartDAOImpl implements CarPartDAO {
    
    public static final CarPartDAO INSTANCE = new CarPartDAOImpl();
    
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO CAR_PART ("
        + "ID, LEVEL, NAME, WEAR"
        + ") VALUES (?, ?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "ID, LEVEL, NAME, WEAR "
        + "FROM CAR_PART WHERE "
        + "ID = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE CAR_PART SET "
        + "LEVEL = ?, NAME = ?, WEAR = ? "
        + "WHERE "
        + "ID = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM CAR_PART WHERE "
        + "ID = ?";
    
    private PartOptionDAO optionDAO = PartOptionDAOImpl.INSTANCE;
    
    private CarPartDAOImpl() {}

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(CarPart bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            bean.setId( IdGeneratorDAO.INSTANCE.getNextId( conn ) );
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, bean.getId());
            ps.setInt(2, bean.getLevel());
            ps.setString(3, bean.getName());
            ps.setDouble(4, bean.getWear());
            ps.executeUpdate();
            for( PartOption option : bean.getOptions() ) {
                optionDAO.create( bean.getId(), option, conn );
            }
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public CarPart load(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<CarPart> results = getResults(rs);
            if (results.size() > 0) {
                CarPart part = results.get(0);
                List<PartOption> options = optionDAO.loadOptionsForPart( part.getId(), conn );
                part.getOptions().addAll( options );
                return part;
            } else {
                return null;
            }
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(CarPart bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setInt(1, bean.getLevel());
            ps.setString(2, bean.getName());
            ps.setDouble(3, bean.getWear());
            ps.setInt(4, bean.getId());
            int res = ps.executeUpdate();
            for( PartOption option : bean.getOptions() ) {
                optionDAO.update( bean.getId(), option, conn );
            }
            return res;
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<CarPart> getResults(ResultSet rs) throws SQLException {
        List<CarPart> results = new ArrayList<CarPart>();
        while (rs.next()) {
            CarPart bean = new CarPart();
            bean.setId(rs.getInt("ID"));
            bean.setLevel(rs.getInt("LEVEL"));
            bean.setName(rs.getString("NAME"));
            bean.setWear(rs.getDouble("WEAR"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}