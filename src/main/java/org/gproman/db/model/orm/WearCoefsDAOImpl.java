/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 20:55:23 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.model.dao.WearCoefsDAO;
import org.gproman.model.track.WearCoefs;

/**
 * This class provides methods to populate DB Table of WEAR_COEFS
 */
public class WearCoefsDAOImpl
        implements
        WearCoefsDAO {
    
    public static final WearCoefsDAO INSTANCE = new WearCoefsDAOImpl();
    
    /* SQL to insert data */
    private static final String SQL_INSERT =
                                                   "INSERT INTO WEAR_COEFS ("
                                                           + "ID, COEFS"
                                                           + ") VALUES (?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
                                                   "SELECT "
                                                           + "ID, COEFS "
                                                           + "FROM WEAR_COEFS WHERE "
                                                           + "ID = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
                                                   "UPDATE WEAR_COEFS SET "
                                                           + "COEFS = ? "
                                                           + "WHERE "
                                                           + "ID = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
                                                   "DELETE FROM WEAR_COEFS WHERE "
                                                           + "ID = ?";

    private WearCoefsDAOImpl() {}
    
    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(WearCoefs bean,
                       Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            bean.setId( 1 );
            ps = conn.prepareStatement( SQL_INSERT );
            ps.setInt( 1, bean.getId() );
            ps.setBinaryStream( 2, getInputStream( bean.getCoefs() ) );
            ps.executeUpdate();
        } catch( IOException e ) {
            throw new SQLException( "Error saving wear coeficients blob", e);
        } finally {
            close( ps );
        }
    }

    private ByteArrayInputStream getInputStream(Object bean) throws IOException {
        ByteArrayOutputStream blob = new ByteArrayOutputStream();
        ObjectOutputStream out = new ObjectOutputStream( blob );
        out.writeObject( bean );
        ByteArrayInputStream is = new ByteArrayInputStream( blob.toByteArray() );
        return is;
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public WearCoefs load(Integer key,
                          Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement( SQL_SELECT );
            ps.setInt( 1, key );
            rs = ps.executeQuery();
            List<WearCoefs> results = getResults( rs );
            if ( results.size() > 0 ) return (WearCoefs) results.get( 0 );
            else return null;
        } finally {
            close( rs );
            close( ps );
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(WearCoefs bean,
                      Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement( SQL_UPDATE );
            ps.setBinaryStream( 1, getInputStream( bean.getCoefs() ) );
            ps.setInt( 2, bean.getId() );
            return ps.executeUpdate();
        } catch( IOException e ) {
            throw new SQLException( "Error updating wear coeficients blob", e);
        } finally {
            close( ps );
        }
    }

    @Override
    public void createOrUpdate(WearCoefs wc,
                               Connection conn) throws SQLException {
        if ( wc.getId() == null || update( wc, conn ) == 0 ) {
            create( wc, conn );
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key,
                       Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement( SQL_DELETE );
            ps.setInt( 1, key );
            ps.executeUpdate();
        } finally {
            close( ps );
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<WearCoefs> getResults(ResultSet rs) throws SQLException {
        List<WearCoefs> results = new ArrayList<WearCoefs>();
        while ( rs.next() ) {
            WearCoefs bean = new WearCoefs();
            bean.setId( rs.getInt( "ID" ) );
            try {
                InputStream is = rs.getBinaryStream( "COEFS" );
                bean.setCoefs( (BigDecimal[]) (new ObjectInputStream( is ) ).readObject() );
                is.close();
            } catch ( IOException e ) {
                throw new SQLException( "Error loading wear coeficients blob", e);
            } catch ( ClassNotFoundException e ) {
                throw new SQLException( "Error loading wear coeficients blob", e);
            }
            results.add( bean );
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if ( stmt != null ) {
            try {
                stmt.close();
            } catch ( SQLException e ) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if ( rs != null ) {
            try {
                rs.close();
            } catch ( SQLException e ) {
            }
        }
    }
}