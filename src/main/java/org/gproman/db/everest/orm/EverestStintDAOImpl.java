/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.everest.orm;

import static org.gproman.db.DBUtil.getDoubleOrNull;
import static org.gproman.db.DBUtil.getIntOrNull;
import static org.gproman.db.DBUtil.setDoubleParameter;
import static org.gproman.db.DBUtil.setIntParameter;
import static org.gproman.db.DBUtil.setStringParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.everest.dao.EverestStintDAO;
import org.gproman.model.everest.NormalizedStint;
import org.gproman.model.everest.WeatherType;
import org.gproman.model.race.Tyre;

/**
 * This class provides methods to populate DB Table of PIT
 */
public class EverestStintDAOImpl implements EverestStintDAO {

    public static final EverestStintDAO INSTANCE              = new EverestStintDAOImpl();

    /* SQL to insert data */
    private static final String         SQL_INSERT            =
                                                                      "INSERT INTO STINT ("
                                                                              + "RACE_ID, NUMBER, INITIAL_LAP, FINAL_LAP, REASON, "
                                                                              + "TYRE, TYRE_LEFT, TYRE_USED, TYRE_NO_BAD, TYRE_DURABILITY, "
                                                                              + "AVG_TEMP, AVG_HUM, FUEL_START, FUEL_LEFT, REFUELED_TO, PIT_TIME, "
                                                                              + "WEATHER_TYPE "
                                                                              + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String         SQL_SELECT            =
                                                                      "SELECT "
                                                                              + "ID, RACE_ID, NUMBER, INITIAL_LAP, FINAL_LAP, REASON, "
                                                                              + "TYRE, TYRE_LEFT, TYRE_USED, TYRE_NO_BAD, TYRE_DURABILITY, "
                                                                              + "AVG_TEMP, AVG_HUM, FUEL_START, FUEL_LEFT, REFUELED_TO, PIT_TIME, "
                                                                              + "WEATHER_TYPE "
                                                                              + "FROM STINT WHERE "
                                                                              + "ID = ?";

    private static final String         SQL_SELECT_BY_RACE_ID =
                                                                      "SELECT "
                                                                              + "ID, RACE_ID, NUMBER, INITIAL_LAP, FINAL_LAP, REASON, "
                                                                              + "TYRE, TYRE_LEFT, TYRE_USED, TYRE_NO_BAD, TYRE_DURABILITY, "
                                                                              + "AVG_TEMP, AVG_HUM, FUEL_START, FUEL_LEFT, REFUELED_TO, PIT_TIME, "
                                                                              + "WEATHER_TYPE "
                                                                              + "FROM STINT WHERE "
                                                                              + "RACE_ID = ?";

    /* SQL to update data */
    private static final String         SQL_UPDATE            =
                                                                      "UPDATE STINT SET "
                                                                              + "RACE_ID = ?, NUMBER = ?, INITIAL_LAP = ?, FINAL_LAP = ?, REASON = ?, "
                                                                              + "TYRE = ?, TYRE_LEFT = ?, TYRE_USED = ?, TYRE_NO_BAD = ?, "
                                                                              + "TYRE_DURABILITY = ?, AVG_TEMP = ?, AVG_HUM = ?, FUEL_START = ?, "
                                                                              + "FUEL_LEFT = ?, REFUELED_TO = ?, PIT_TIME = ?, "
                                                                              + "WEATHER_TYPE = ? "
                                                                              + "WHERE "
                                                                              + "ID = ?";

    /* SQL to delete data */
    private static final String         SQL_DELETE            =
                                                                      "DELETE FROM STINT WHERE ID = ?";

    private EverestStintDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Integer raceId, NormalizedStint bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            int index = 1;
            setIntParameter(ps, index++, raceId);
            setIntParameter(ps, index++, bean.getNumber());
            setIntParameter(ps, index++, bean.getInitialLap());
            setIntParameter(ps, index++, bean.getFinalLap());
            setStringParameter(ps, index++, bean.getPitReason());
            setStringParameter(ps, index++, bean.getTyre());
            setIntParameter(ps, index++, bean.getTyreLeft());
            setDoubleParameter(ps, index++, bean.getTyreUsed());
            setDoubleParameter(ps, index++, bean.getTyreNoBad());
            setDoubleParameter(ps, index++, bean.getTyreDurability());
            setDoubleParameter(ps, index++, bean.getAvgTemp());
            setDoubleParameter(ps, index++, bean.getAvgHum());
            setDoubleParameter(ps, index++, bean.getFuelStart());
            setDoubleParameter(ps, index++, bean.getFuelLeft());
            setIntParameter(ps, index++, bean.getRefueledTo());
            setIntParameter(ps, index++, bean.getPitTime());
            setStringParameter(ps, index++, bean.getWeatherType());
            ps.executeUpdate();

            ResultSet generatedKeys = ps.getGeneratedKeys();
            if (generatedKeys.next()) {
                bean.setId(generatedKeys.getInt(1));
            }
        } finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public NormalizedStint load(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<NormalizedStint> results = getResults(rs);
            if (results.size() > 0)
                return results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    @Override
    public List<NormalizedStint> loadStintsForRace(Integer raceId,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_BY_RACE_ID);
            ps.setInt(1, raceId);
            rs = ps.executeQuery();
            return getResults(rs);
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Integer raceId, NormalizedStint bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            int index = 1;
            setIntParameter(ps, index++, raceId);
            setIntParameter(ps, index++, bean.getNumber());
            setIntParameter(ps, index++, bean.getInitialLap());
            setIntParameter(ps, index++, bean.getFinalLap());
            setStringParameter(ps, index++, bean.getPitReason());
            setStringParameter(ps, index++, bean.getTyre());
            setIntParameter(ps, index++, bean.getTyreLeft());
            setDoubleParameter(ps, index++, bean.getTyreUsed());
            setDoubleParameter(ps, index++, bean.getTyreNoBad());
            setDoubleParameter(ps, index++, bean.getTyreDurability());
            setDoubleParameter(ps, index++, bean.getAvgTemp());
            setDoubleParameter(ps, index++, bean.getAvgHum());
            setDoubleParameter(ps, index++, bean.getFuelStart());
            setDoubleParameter(ps, index++, bean.getFuelLeft());
            setIntParameter(ps, index++, bean.getRefueledTo());
            setIntParameter(ps, index++, bean.getPitTime());
            setStringParameter(ps, index++, bean.getWeatherType());
            ps.setInt(index++, bean.getId());
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<NormalizedStint> getResults(ResultSet rs) throws SQLException {
        List<NormalizedStint> results = new ArrayList<NormalizedStint>();
        while (rs.next()) {
            NormalizedStint bean = new NormalizedStint();
            bean.setId(rs.getInt("ID"));
            bean.setNumber(getIntOrNull(rs, "NUMBER"));
            bean.setInitialLap(getIntOrNull(rs, "INITIAL_LAP"));
            bean.setFinalLap(getIntOrNull(rs, "FINAL_LAP"));
            bean.setPitReason(rs.getString("REASON"));
            String tyre = rs.getString("TYRE");
            bean.setTyre(tyre != null ? Tyre.determineTyre(tyre) : null);
            bean.setTyreLeft(getIntOrNull(rs, "TYRE_LEFT"));
            bean.setTyreUsed(getDoubleOrNull(rs, "TYRE_USED"));
            bean.setTyreNoBad(getDoubleOrNull(rs, "TYRE_NO_BAD"));
            bean.setTyreDurability(getDoubleOrNull(rs, "TYRE_DURABILITY"));
            bean.setAvgTemp(getDoubleOrNull(rs, "AVG_TEMP"));
            bean.setAvgHum(getDoubleOrNull(rs, "AVG_HUM"));
            bean.setFuelStart(getDoubleOrNull(rs, "FUEL_START"));
            bean.setFuelLeft(getDoubleOrNull(rs, "FUEL_LEFT"));
            bean.setRefueledTo(getIntOrNull(rs, "REFUELED_TO"));
            bean.setPitTime(getIntOrNull(rs, "PIT_TIME"));
            String weatherType = rs.getString("WEATHER_TYPE");
            bean.setWeatherType(weatherType != null ? WeatherType.valueOf(weatherType) : WeatherType.UNKNOWN);
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }
}