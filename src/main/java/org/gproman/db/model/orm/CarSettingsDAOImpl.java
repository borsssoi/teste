/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import static org.gproman.db.DBUtil.getIntOrNull;
import static org.gproman.db.DBUtil.setIntParameter;
import static org.gproman.db.DBUtil.setStringParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.model.dao.CarSettingsDAO;
import org.gproman.db.model.dao.IdGeneratorDAO;
import org.gproman.model.race.CarSettings;
import org.gproman.model.race.Tyre;

/**
 * This class provides methods to populate DB Table of CAR_SETTINGS
 */
public class CarSettingsDAOImpl
        implements
        CarSettingsDAO {

    public static final CarSettingsDAO INSTANCE           = new CarSettingsDAOImpl();

    /* SQL to insert data */
    private static final String        SQL_INSERT         =
                                                                  "INSERT INTO CAR_SETTINGS ("
                                                                          + "ID, BRAKES, ENGINE, FRONT_WING, GEAR, REAR_WING, SUSPENSION, "
                                                                          + "TYRE"
                                                                          + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String        SQL_SELECT         =
                                                                  "SELECT "
                                                                          + "ID, BRAKES, ENGINE, FRONT_WING, GEAR, REAR_WING, SUSPENSION, "
                                                                          + "TYRE "
                                                                          + "FROM CAR_SETTINGS WHERE "
                                                                          + "ID = ?";

    /* SQL to update data */
    private static final String        SQL_UPDATE         =
                                                                  "UPDATE CAR_SETTINGS SET "
                                                                          + "BRAKES = ?, ENGINE = ?, FRONT_WING = ?, GEAR = ?, REAR_WING = ?, SUSPENSION = ?, TYRE = ? "
                                                                          + "WHERE "
                                                                          + "ID = ?";

    /* SQL to delete data */
    private static final String        SQL_DELETE         =
                                                                  "DELETE FROM CAR_SETTINGS WHERE "
                                                                          + "ID = ?";

    /* SQL to delete data */
    private static final String        SQL_DELETE_FOR_LAP =
                                                                  "DELETE FROM CAR_SETTINGS WHERE "
                                                                          + "ID IN ( SELECT SETTINGS_ID FROM LAP WHERE ID = ? )";

    private CarSettingsDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(CarSettings bean,
                       Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            bean.setId( IdGeneratorDAO.INSTANCE.getNextId( conn ) );
            ps = conn.prepareStatement( SQL_INSERT );
            ps.setInt( 1, bean.getId() );
            setIntParameter( ps, 2, bean.getBrakes() );
            setIntParameter( ps, 3, bean.getEngine() );
            setIntParameter( ps, 4, bean.getFrontWing() );
            setIntParameter( ps, 5, bean.getGear() );
            setIntParameter( ps, 6, bean.getRearWing() );
            setIntParameter( ps, 7, bean.getSuspension() );
            setStringParameter( ps, 8, bean.getTyre() );
            ps.executeUpdate();
        } finally {
            close( ps );
        }
    }

    /**
     * Retrieve a record from Database.
     * @param beanKey   The PK Object to be retrieved.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public CarSettings load(Integer key,
                            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement( SQL_SELECT );
            ps.setInt( 1, key );
            rs = ps.executeQuery();
            List<CarSettings> results = getResults( rs );
            if ( results.size() > 0 ) return results.get( 0 );
            else return null;
        } finally {
            close( rs );
            close( ps );
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(CarSettings bean,
                       Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            if( bean.getId() != null ) {
                ps = conn.prepareStatement( SQL_UPDATE );
                setIntParameter( ps, 1, bean.getBrakes() );
                setIntParameter( ps, 2, bean.getEngine() );
                setIntParameter( ps, 3, bean.getFrontWing() );
                setIntParameter( ps, 4, bean.getGear() );
                setIntParameter( ps, 5, bean.getRearWing() );
                setIntParameter( ps, 6, bean.getSuspension() );
                setStringParameter( ps, 7, bean.getTyre() );
                ps.setInt( 8, bean.getId() );
                return ps.executeUpdate();
            } else {
                return 0;
            }
        } finally {
            close( ps );
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key,
                       Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement( SQL_DELETE );
            ps.setInt( 1, key );
            ps.executeUpdate();
        } finally {
            close( ps );
        }
    }

    public void deleteSettingsForLap(Integer key,
                                     Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement( SQL_DELETE_FOR_LAP );
            ps.setInt( 1, key );
            ps.executeUpdate();
        } finally {
            close( ps );
        }
    }
    
    @Override
    public void createOrUpdate(CarSettings settings,
                               Connection conn) throws SQLException {
        if( update( settings, conn ) == 0 ) {
            create( settings, conn );
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<CarSettings> getResults(ResultSet rs) throws SQLException {
        List<CarSettings> results = new ArrayList<CarSettings>();
        while ( rs.next() ) {
            CarSettings bean = new CarSettings();
            bean.setId( getIntOrNull( rs, "ID" ) );
            bean.setBrakes( getIntOrNull( rs, "BRAKES" ) );
            bean.setEngine( getIntOrNull( rs, "ENGINE" ) );
            bean.setFrontWing( getIntOrNull( rs, "FRONT_WING" ) );
            bean.setGear( getIntOrNull( rs, "GEAR" ) );
            bean.setRearWing( getIntOrNull( rs, "REAR_WING" ) );
            bean.setSuspension( getIntOrNull( rs, "SUSPENSION" ) );
            String tyre = rs.getString( "TYRE" );
            bean.setTyre( tyre != null ? Tyre.valueOf( tyre ) : null );
            results.add( bean );
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if ( stmt != null ) {
            try {
                stmt.close();
            } catch ( SQLException e ) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if ( rs != null ) {
            try {
                rs.close();
            } catch ( SQLException e ) {
            }
        }
    }
}