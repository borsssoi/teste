/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.model.dao.DriverWearWeightDAO;
import org.gproman.model.driver.DriverWearWeight;

/**
 * This class provides methods to populate DB Table of DRIVER_WEAR_WEIGHT
 */
public class DriverWearWeightDAOImpl
        implements
        DriverWearWeightDAO {
    
    public static final DriverWearWeightDAO INSTANCE = new DriverWearWeightDAOImpl();
    
    /* SQL to insert data */
    private static final String SQL_INSERT =
                                                   "INSERT INTO DRIVER_WEAR_WEIGHT ("
                                                           + "ID, AGGRESSIVENESS, CONCENTRATION, EXPERIENCE, STAMINA, TALENT"
                                                           + ") VALUES (?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
                                                   "SELECT "
                                                           + "ID, AGGRESSIVENESS, CONCENTRATION, EXPERIENCE, STAMINA, TALENT "
                                                           + "FROM DRIVER_WEAR_WEIGHT WHERE "
                                                           + "ID = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
                                                   "UPDATE DRIVER_WEAR_WEIGHT SET "
                                                           + "AGGRESSIVENESS = ?, CONCENTRATION = ?, EXPERIENCE = ?, STAMINA = ?, TALENT = ? "
                                                           + "WHERE "
                                                           + "ID = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
                                                   "DELETE FROM DRIVER_WEAR_WEIGHT WHERE "
                                                           + "ID = ?";

    private DriverWearWeightDAOImpl() {}
    
    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(DriverWearWeight bean,
                       Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            bean.setId( 1 );
            ps = conn.prepareStatement( SQL_INSERT );
            ps.setInt( 1, bean.getId() );
            ps.setBigDecimal( 2, bean.getAggressiveness() );
            ps.setBigDecimal( 3, bean.getConcentration() );
            ps.setBigDecimal( 4, bean.getExperience() );
            ps.setBigDecimal( 5, bean.getStamina() );
            ps.setBigDecimal( 6, bean.getTalent() );
            ps.executeUpdate();
        } finally {
            close( ps );
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public DriverWearWeight load(Integer key,
                                 Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement( SQL_SELECT );
            ps.setInt( 1, key );
            rs = ps.executeQuery();
            List<DriverWearWeight> results = getResults( rs );
            if ( results.size() > 0 ) return (DriverWearWeight) results.get( 0 );
            else return null;
        } finally {
            close( rs );
            close( ps );
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(DriverWearWeight bean,
                      Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement( SQL_UPDATE );
            ps.setBigDecimal( 1, bean.getAggressiveness() );
            ps.setBigDecimal( 2, bean.getConcentration() );
            ps.setBigDecimal( 3, bean.getExperience() );
            ps.setBigDecimal( 4, bean.getStamina() );
            ps.setBigDecimal( 5, bean.getTalent() );
            ps.setInt( 6, bean.getId() );
            return ps.executeUpdate();
        } finally {
            close( ps );
        }
    }

    @Override
    public void createOrUpdate(DriverWearWeight wc,
                               Connection conn) throws SQLException {
        if ( wc.getId() == null || update( wc, conn ) == 0 ) {
            create( wc, conn );
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key,
                       Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement( SQL_DELETE );
            ps.setInt( 1, key );
            ps.executeUpdate();
        } finally {
            close( ps );
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<DriverWearWeight> getResults(ResultSet rs) throws SQLException {
        List<DriverWearWeight> results = new ArrayList<DriverWearWeight>();
        while ( rs.next() ) {
            DriverWearWeight bean = new DriverWearWeight();
            bean.setId( rs.getInt( "ID" ) );
            bean.setAggressiveness( rs.getBigDecimal( "AGGRESSIVENESS" ) );
            bean.setConcentration( rs.getBigDecimal( "CONCENTRATION" ) );
            bean.setExperience( rs.getBigDecimal( "EXPERIENCE" ) );
            bean.setStamina( rs.getBigDecimal( "STAMINA" ) );
            bean.setTalent( rs.getBigDecimal( "TALENT" ) );
            results.add( bean );
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if ( stmt != null ) {
            try {
                stmt.close();
            } catch ( SQLException e ) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if ( rs != null ) {
            try {
                rs.close();
            } catch ( SQLException e ) {
            }
        }
    }
}