/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */
package org.gproman.db.model.orm;

import static org.gproman.db.DBUtil.setIntParameter;
import static org.gproman.db.DBUtil.setParameter;
import static org.gproman.db.DBUtil.setStringParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.gproman.db.DBUtil;
import org.gproman.db.model.dao.CarDAO;
import org.gproman.db.model.dao.CarSettingsDAO;
import org.gproman.db.model.dao.DriverDAO;
import org.gproman.db.model.dao.FacilitiesDAO;
import org.gproman.db.model.dao.ForecastDAO;
import org.gproman.db.model.dao.IdGeneratorDAO;
import org.gproman.db.model.dao.LapDAO;
import org.gproman.db.model.dao.PitDAO;
import org.gproman.db.model.dao.PracticeDAO;
import org.gproman.db.model.dao.QualifyDAO;
import org.gproman.db.model.dao.RaceDAO;
import org.gproman.db.model.dao.RaceLapDAO;
import org.gproman.db.model.dao.RaceStatusDAO;
import org.gproman.db.model.dao.TechDirectorDAO;
import org.gproman.db.model.dao.TestSessionDAO;
import org.gproman.db.model.dao.TrackDAO;
import org.gproman.model.PersistentEntity;
import org.gproman.model.car.Car;
import org.gproman.model.driver.Driver;
import org.gproman.model.race.CarSettings;
import org.gproman.model.race.Forecast;
import org.gproman.model.race.Lap;
import org.gproman.model.race.Pit;
import org.gproman.model.race.Practice;
import org.gproman.model.race.Qualify;
import org.gproman.model.race.Race;
import org.gproman.model.race.RaceStatus;
import org.gproman.model.race.StartingRisk;
import org.gproman.model.race.TestSession;
import org.gproman.model.race.Tyre;
import org.gproman.model.staff.Facilities;
import org.gproman.model.staff.TechDirector;

/**
 * This class provides methods to populate DB Table of RACE
 */
public class RaceDAOImpl
        implements
        RaceDAO {

    public static final RaceDAO INSTANCE = new RaceDAOImpl();

    /* SQL to insert data */
    private static final String SQL_INSERT
            = "INSERT INTO RACE ("
            + "ID, SEASON_ID, NUMBER, RACE_DATE, TRACK_ID, STATUS_ID, PRACTICE_ID, "
            + "QUALIFY1_ID, QUALIFY2_ID, RACE_SETTINGS_ID, STARTING_FUEL, FINISH_FUEL, FINISH_TYRE, RISKSTARTING, "
            + "RISKCLEAR, RISKDEFEND, RISKMALFUNCTION, RISKOVERTAKE, CAR_START_ID, CAR_FINISH_ID, DRIVER_START_ID, "
            + "DRIVER_FINISH_ID, FUEL_STRATEGY, "
            + "FC_Q1, FC_Q2, FC_R1, FC_R2, FC_R3, FC_R4, "
            + "TD_START_ID, TD_FINISH_ID, "
            + "TYRE_AT_START, TYRE_WHEN_WET, TYRE_WHEN_DRY, WAIT_PIT_WET, WAIT_PIT_DRY, TEST_SESSION_ID, "
            + "FACILITIES_ID, RISKCLEARWET, ENERGIA_INICIAL, ENERGIA_FINAL  "
            + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

    /* SQL to select data */
    private static final String SQL_SELECT
            = "SELECT "
            + "R.ID AS ID, SEASON_ID, R.NUMBER AS NUMBER, S.NUMBER AS SEASON_NUMBER, RACE_DATE, TRACK_ID, STATUS_ID, PRACTICE_ID, "
            + "QUALIFY1_ID, QUALIFY2_ID, RACE_SETTINGS_ID, STARTING_FUEL, FINISH_FUEL, FINISH_TYRE, RISKSTARTING, "
            + "RISKCLEAR, RISKDEFEND, RISKMALFUNCTION, RISKOVERTAKE, CAR_START_ID, CAR_FINISH_ID, DRIVER_START_ID, "
            + "DRIVER_FINISH_ID, FUEL_STRATEGY, "
            + "FC_Q1, FC_Q2, FC_R1, FC_R2, FC_R3, FC_R4, "
            + "TD_START_ID, TD_FINISH_ID, "
            + "TYRE_AT_START, TYRE_WHEN_WET, TYRE_WHEN_DRY, WAIT_PIT_WET, WAIT_PIT_DRY, TEST_SESSION_ID, "
            + "FACILITIES_ID, RISKCLEARWET, ENERGIA_INICIAL, ENERGIA_FINAL "
            + "FROM RACE R LEFT JOIN SEASON S ON R.SEASON_ID=S.ID WHERE "
            + "R.ID = ?";

    private static final String SQL_SELECT_BY_NUMBER
            = "SELECT "
            + "R.ID AS ID, SEASON_ID, R.NUMBER AS NUMBER, S.NUMBER AS SEASON_NUMBER, RACE_DATE, TRACK_ID, STATUS_ID, PRACTICE_ID, "
            + "QUALIFY1_ID, QUALIFY2_ID, RACE_SETTINGS_ID, STARTING_FUEL, FINISH_FUEL, FINISH_TYRE, RISKSTARTING, "
            + "RISKCLEAR, RISKDEFEND, RISKMALFUNCTION, RISKOVERTAKE, CAR_START_ID, CAR_FINISH_ID, DRIVER_START_ID, "
            + "DRIVER_FINISH_ID, FUEL_STRATEGY, "
            + "FC_Q1, FC_Q2, FC_R1, FC_R2, FC_R3, FC_R4, "
            + "TD_START_ID, TD_FINISH_ID, "
            + "TYRE_AT_START, TYRE_WHEN_WET, TYRE_WHEN_DRY, WAIT_PIT_WET, WAIT_PIT_DRY, TEST_SESSION_ID, "
            + "FACILITIES_ID, RISKCLEARWET, ENERGIA_INICIAL, ENERGIA_FINAL "
            + "FROM RACE R LEFT JOIN SEASON S ON R.SEASON_ID=S.ID WHERE "
            + "S.NUMBER = ? AND R.NUMBER = ?";

    private static final String SQL_SELECT_BY_SEASON_ID
            = "SELECT "
            + "R.ID AS ID, SEASON_ID, R.NUMBER AS NUMBER, S.NUMBER AS SEASON_NUMBER, RACE_DATE, TRACK_ID, STATUS_ID, PRACTICE_ID, "
            + "QUALIFY1_ID, QUALIFY2_ID, RACE_SETTINGS_ID, STARTING_FUEL, FINISH_FUEL, FINISH_TYRE, RISKSTARTING, "
            + "RISKCLEAR, RISKDEFEND, RISKMALFUNCTION, RISKOVERTAKE, CAR_START_ID, CAR_FINISH_ID, DRIVER_START_ID, "
            + "DRIVER_FINISH_ID, FUEL_STRATEGY, "
            + "FC_Q1, FC_Q2, FC_R1, FC_R2, FC_R3, FC_R4, "
            + "TD_START_ID, TD_FINISH_ID, "
            + "TYRE_AT_START, TYRE_WHEN_WET, TYRE_WHEN_DRY, WAIT_PIT_WET, WAIT_PIT_DRY, TEST_SESSION_ID, "
            + "FACILITIES_ID, RISKCLEARWET, ENERGIA_INICIAL, ENERGIA_FINAL "
            + "FROM RACE R LEFT JOIN SEASON S ON R.SEASON_ID=S.ID WHERE "
            + "R.SEASON_ID = ? ORDER BY R.NUMBER";

    private static final String SQL_SELECT_FOR_TELEMETRY
            = "SELECT "
            + "R.ID AS ID, SEASON_ID, R.NUMBER AS NUMBER, S.NUMBER AS SEASON_NUMBER, RACE_DATE, TRACK_ID, STATUS_ID, PRACTICE_ID, "
            + "QUALIFY1_ID, QUALIFY2_ID, RACE_SETTINGS_ID, STARTING_FUEL, FINISH_FUEL, FINISH_TYRE, RISKSTARTING, "
            + "RISKCLEAR, RISKDEFEND, RISKMALFUNCTION, RISKOVERTAKE, CAR_START_ID, CAR_FINISH_ID, DRIVER_START_ID, "
            + "DRIVER_FINISH_ID, FUEL_STRATEGY, "
            + "FC_Q1, FC_Q2, FC_R1, FC_R2, FC_R3, FC_R4, "
            + "TD_START_ID, TD_FINISH_ID, "
            + "TYRE_AT_START, TYRE_WHEN_WET, TYRE_WHEN_DRY, WAIT_PIT_WET, WAIT_PIT_DRY, TEST_SESSION_ID, "
            + "FACILITIES_ID, RISKCLEARWET, ENERGIA_INICIAL, ENERGIA_FINAL "
            + "FROM RACE R LEFT JOIN SEASON S ON R.SEASON_ID=S.ID JOIN RACE_STATUS T ON R.STATUS_ID=T.ID WHERE "
            + "S.NUMBER = ? AND T.TELEMETRY IS TRUE ORDER BY SEASON_NUMBER DESC, NUMBER DESC";

    private static final String SQL_SELECT_FOR_SETUP
            = "SELECT "
            + "R.ID AS ID, SEASON_ID, R.NUMBER AS NUMBER, S.NUMBER AS SEASON_NUMBER, RACE_DATE, TRACK_ID, STATUS_ID, PRACTICE_ID, "
            + "QUALIFY1_ID, QUALIFY2_ID, RACE_SETTINGS_ID, STARTING_FUEL, FINISH_FUEL, FINISH_TYRE, RISKSTARTING, "
            + "RISKCLEAR, RISKDEFEND, RISKMALFUNCTION, RISKOVERTAKE, CAR_START_ID, CAR_FINISH_ID, DRIVER_START_ID, "
            + "DRIVER_FINISH_ID, FUEL_STRATEGY, "
            + "FC_Q1, FC_Q2, FC_R1, FC_R2, FC_R3, FC_R4, "
            + "TD_START_ID, TD_FINISH_ID, "
            + "TYRE_AT_START, TYRE_WHEN_WET, TYRE_WHEN_DRY, WAIT_PIT_WET, WAIT_PIT_DRY, TEST_SESSION_ID, "
            + "FACILITIES_ID, RISKCLEARWET, ENERGIA_INICIAL, ENERGIA_FINAL "
            + "FROM RACE R LEFT JOIN SEASON S ON R.SEASON_ID=S.ID JOIN RACE_STATUS T ON R.STATUS_ID=T.ID WHERE "
            + "S.NUMBER = ? AND T.SETUP IS TRUE ORDER BY SEASON_NUMBER DESC, NUMBER DESC";

    private static final String SQL_SELECT_FOR_TEST
            = "SELECT "
            + "R.ID AS ID, SEASON_ID, R.NUMBER AS NUMBER, S.NUMBER AS SEASON_NUMBER, RACE_DATE, R.TRACK_ID, STATUS_ID, PRACTICE_ID, "
            + "QUALIFY1_ID, QUALIFY2_ID, RACE_SETTINGS_ID, STARTING_FUEL, FINISH_FUEL, FINISH_TYRE, RISKSTARTING, "
            + "RISKCLEAR, RISKDEFEND, RISKMALFUNCTION, RISKOVERTAKE, CAR_START_ID, CAR_FINISH_ID, DRIVER_START_ID, "
            + "DRIVER_FINISH_ID, FUEL_STRATEGY, "
            + "FC_Q1, FC_Q2, FC_R1, FC_R2, FC_R3, FC_R4, "
            + "TD_START_ID, TD_FINISH_ID, "
            + "TYRE_AT_START, TYRE_WHEN_WET, TYRE_WHEN_DRY, WAIT_PIT_WET, WAIT_PIT_DRY, TEST_SESSION_ID, "
            + "FACILITIES_ID, RISKCLEARWET, ENERGIA_INICIAL, ENERGIA_FINAL "
            + "FROM RACE R LEFT JOIN SEASON S ON R.SEASON_ID=S.ID JOIN TEST_SESSION T ON R.TEST_SESSION_ID=T.ID WHERE "
            + "S.NUMBER = ? AND T.STINTS_DONE > 0 ORDER BY SEASON_NUMBER DESC, NUMBER DESC";

    /* SQL to update data */
    private static final String SQL_UPDATE
            = "UPDATE RACE SET "
            + "SEASON_ID = ?, NUMBER = ?, RACE_DATE = ?, TRACK_ID = ?, STATUS_ID = ?, PRACTICE_ID = ?, QUALIFY1_ID = ?,  "
            + "QUALIFY2_ID = ?, RACE_SETTINGS_ID = ?, STARTING_FUEL = ?, FINISH_FUEL = ?, FINISH_TYRE = ?, RISKSTARTING = ?, RISKCLEAR = ?,  "
            + "RISKDEFEND = ?, RISKMALFUNCTION = ?, RISKOVERTAKE = ?, CAR_START_ID = ?, CAR_FINISH_ID = ?, DRIVER_START_ID = ?, DRIVER_FINISH_ID = ?, FUEL_STRATEGY = ?, "
            + "FC_Q1 = ?, FC_Q2 = ?, FC_R1 = ?, FC_R2 = ?, FC_R3 = ?, FC_R4 = ?, "
            + "TD_START_ID = ?, TD_FINISH_ID = ?, "
            + "TYRE_AT_START = ?, TYRE_WHEN_WET = ?, TYRE_WHEN_DRY = ?, WAIT_PIT_WET = ?, WAIT_PIT_DRY = ?, TEST_SESSION_ID = ?, "
            + "FACILITIES_ID = ?, RISKCLEARWET = ?, ENERGIA_INICIAL = ?, ENERGIA_FINAL = ? "
            + "WHERE "
            + "ID = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE
            = "DELETE FROM RACE WHERE "
            + "ID = ?";

    private TrackDAO trackDAO = TrackDAOImpl.INSTANCE;
    private RaceStatusDAO statusDAO = RaceStatusDAOImpl.INSTANCE;
    private PracticeDAO practiceDAO = PracticeDAOImpl.INSTANCE;
    private QualifyDAO qualifyDAO = QualifyDAOImpl.INSTANCE;
    private CarSettingsDAO settingsDAO = CarSettingsDAOImpl.INSTANCE;
    private CarDAO carDAO = CarDAOImpl.INSTANCE;
    private DriverDAO driverDAO = DriverDAOImpl.INSTANCE;
    private LapDAO lapDAO = LapDAOImpl.INSTANCE;
    private RaceLapDAO rlDAO = RaceLapDAOImpl.INSTANCE;
    private PitDAO pitDAO = PitDAOImpl.INSTANCE;
    private ForecastDAO fcDAO = ForecastDAOImpl.INSTANCE;
    private TechDirectorDAO tdDAO = TechDirectorDAOImpl.INSTANCE;
    private TestSessionDAO tsDAO = TestSessionDAOImpl.INSTANCE;
    private FacilitiesDAO facilitiesDAO = FacilitiesDAOImpl.INSTANCE;

    private RaceDAOImpl() {
    }

    /**
     * Create a new record in Database.
     *
     * @param race The Object to be inserted.
     * @param conn JDBC Connection.
     * @exception SQLException if something is wrong.
     */
    public void create(Integer seasonId,
            Race race,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            race.setId(IdGeneratorDAO.INSTANCE.getNextId(conn));
            createDependent(race, conn);

            ps = conn.prepareStatement(SQL_INSERT);
            int index = 1;
            setIntParameter(ps, index++, race.getId());
            setIntParameter(ps, index++, seasonId);
            setIntParameter(ps, index++, race.getNumber());
            ps.setTimestamp(index++, race.getDate());
            setParameter(ps, index++, race.getTrack());
            setParameter(ps, index++, race.getStatus());
            setParameter(ps, index++, race.getPractice());
            setParameter(ps, index++, race.getQualify1());
            setParameter(ps, index++, race.getQualify2());
            setParameter(ps, index++, race.getRaceSettings());
            setIntParameter(ps, index++, race.getStartingFuel());
            setIntParameter(ps, index++, race.getFinishFuel());
            setIntParameter(ps, index++, race.getFinishTyre());
            ps.setString(index++, race.getRiskStarting() != null ? race.getRiskStarting().toString() : null);
            setIntParameter(ps, index++, race.getRiskClear());
            setIntParameter(ps, index++, race.getRiskDefend());
            setIntParameter(ps, index++, race.getRiskMalfunction());
            setIntParameter(ps, index++, race.getRiskOvertake());
            setParameter(ps, index++, race.getCarStart());
            setParameter(ps, index++, race.getCarFinish());
            setParameter(ps, index++, race.getDriverStart());
            setParameter(ps, index++, race.getDriverFinish());
            ps.setString(index++, race.getFuelStrategy());
            for (int i = 0; i < race.getForecast().length; i++) {
                setParameter(ps, index++, race.getForecast()[i]);
            }
            setParameter(ps, index++, race.getTDStart());
            setParameter(ps, index++, race.getTDFinish());
            setStringParameter(ps, index++, race.getTyreAtStart());
            setStringParameter(ps, index++, race.getTyreWhenWet());
            setStringParameter(ps, index++, race.getTyreWhenDry());
            setIntParameter(ps, index++, race.getWaitPitWet());
            setIntParameter(ps, index++, race.getWaitPitDry());
            setParameter(ps, index++, race.getTestSession());
            setParameter(ps, index++, race.getFacilities());
            setIntParameter(ps, index++, race.getRiskClearWet());
            setStringParameter(ps, index++, race.getEnergiaInicial());
            setStringParameter(ps, index++, race.getEnergiaFinal());
            ps.executeUpdate();

            for (Lap lap : race.getLaps()) {
                lapDAO.create(lap, conn);
                rlDAO.create(race.getId(), lap.getId(), conn);
            }
            for (Pit pit : race.getPits()) {
                pitDAO.create(race.getId(), pit, conn);
            }
        } finally {
            close(ps);
        }
    }

    /**
     * Retrieve a record from Database.
     *
     * @param beanKey The PK Object to be retrieved.
     * @param conn JDBC Connection.
     * @exception SQLException if something is wrong.
     */
    public Race load(Integer raceId,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, raceId);
            rs = ps.executeQuery();
            List<Race> results = getResults(rs, conn);
            return results.size() > 0 ? results.get(0) : null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    @Override
    public Race loadRaceByNumber(Integer season,
            Integer race,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_BY_NUMBER);
            ps.setInt(1, season);
            ps.setInt(2, race);
            rs = ps.executeQuery();
            List<Race> results = getResults(rs, conn);
            return results.size() > 0 ? results.get(0) : null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    @Override
    public List<Race> loadRacesForSeasonById(Integer seasonId,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_BY_SEASON_ID);
            ps.setInt(1, seasonId);
            rs = ps.executeQuery();
            List<Race> results = getResults(rs, conn);
            return results;
        } finally {
            close(rs);
            close(ps);
        }
    }

    @Override
    public List<Race> loadRacesForTelemetry(Integer season,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_FOR_TELEMETRY);
            ps.setInt(1, season);
            rs = ps.executeQuery();
            List<Race> results = getResults(rs, conn);
            return results;
        } finally {
            close(rs);
            close(ps);
        }
    }

    @Override
    public List<Race> loadRacesForSetup(Integer season,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_FOR_SETUP);
            ps.setInt(1, season);
            rs = ps.executeQuery();
            List<Race> results = getResults(rs, conn);
            return results;
        } finally {
            close(rs);
            close(ps);
        }
    }

    @Override
    public List<Race> loadRacesForTest(Integer season,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_FOR_TEST);
            ps.setInt(1, season);
            rs = ps.executeQuery();
            List<Race> results = getResults(rs, conn);
            return results;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     *
     * @param race The Object to be saved.
     * @param conn JDBC Connection.
     * @exception SQLException if something is wrong.
     */
    public int update(Integer seasonId,
            Race race,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            if (race.getId() == null) {
                Race saved = loadRaceByNumber(race.getSeasonNumber(), race.getNumber(), conn);
                if (saved != null) {
                    race.setId(saved.getId());
                } else {
                    // it is not an update
                    return 0;
                }
            }
            List<PersistentEntity> toDelete = updateDependent(race, conn);

            ps = conn.prepareStatement(SQL_UPDATE);
            int index = 1;
            setIntParameter(ps, index++, seasonId);
            setIntParameter(ps, index++, race.getNumber());
            ps.setTimestamp(index++, race.getDate());
            setParameter(ps, index++, race.getTrack());
            setParameter(ps, index++, race.getStatus());
            setParameter(ps, index++, race.getPractice());
            setParameter(ps, index++, race.getQualify1());
            setParameter(ps, index++, race.getQualify2());
            setParameter(ps, index++, race.getRaceSettings());
            setIntParameter(ps, index++, race.getStartingFuel());
            setIntParameter(ps, index++, race.getFinishFuel());
            setIntParameter(ps, index++, race.getFinishTyre());
            ps.setString(index++, race.getRiskStarting() != null ? race.getRiskStarting().toString() : null);
            setIntParameter(ps, index++, race.getRiskClear());
            setIntParameter(ps, index++, race.getRiskDefend());
            setIntParameter(ps, index++, race.getRiskMalfunction());
            setIntParameter(ps, index++, race.getRiskOvertake());

            setParameter(ps, index++, race.getCarStart());
            setParameter(ps, index++, race.getCarFinish());
            setParameter(ps, index++, race.getDriverStart());
            setParameter(ps, index++, race.getDriverFinish());
            ps.setString(index++, race.getFuelStrategy());
            for (int i = 0; i < race.getForecast().length; i++) {
                setParameter(ps, index++, race.getForecast()[i]);
            }
            setParameter(ps, index++, race.getTDStart());
            setParameter(ps, index++, race.getTDFinish());
            setStringParameter(ps, index++, race.getTyreAtStart());
            setStringParameter(ps, index++, race.getTyreWhenWet());
            setStringParameter(ps, index++, race.getTyreWhenDry());
            setIntParameter(ps, index++, race.getWaitPitWet());
            setIntParameter(ps, index++, race.getWaitPitDry());
            setParameter(ps, index++, race.getTestSession());
            setParameter(ps, index++, race.getFacilities());
            setIntParameter(ps, index++, race.getRiskClearWet());

            setStringParameter(ps, index++, race.getEnergiaInicial());
            setStringParameter(ps, index++, race.getEnergiaFinal());

            setIntParameter(ps, index++, race.getId());

            int result = ps.executeUpdate();

            deleteDependent(toDelete, conn);

            return result;
        } finally {
            close(ps);
        }
    }

    private void deleteDependent(List<PersistentEntity> toDelete,
            Connection conn) throws SQLException {
        for (PersistentEntity pe : toDelete) {
            if (pe instanceof RaceStatus) {
                statusDAO.delete(pe.getId(), conn);
            } else if (pe instanceof Practice) {
                practiceDAO.delete(pe.getId(), conn);
            } else if (pe instanceof Qualify) {
                qualifyDAO.delete(pe.getId(), conn);
            } else if (pe instanceof CarSettings) {
                settingsDAO.delete(pe.getId(), conn);
            } else if (pe instanceof Car) {
                carDAO.delete(pe.getId(), conn);
            } else if (pe instanceof Driver) {
                driverDAO.delete(pe.getId(), conn);
            } else if (pe instanceof Forecast) {
                fcDAO.delete(pe.getId(), conn);
            } else if (pe instanceof TechDirector) {
                tdDAO.delete(pe.getId(), conn);
            } else if (pe instanceof TestSession) {
                tsDAO.delete(pe.getId(), conn);
            } else if (pe instanceof Facilities) {
                facilitiesDAO.delete(pe.getId(), conn);
            } else {
                throw new SQLException("Unknown entity type for deletion: " + pe.getClass().getName());
            }
        }
    }

    @Override
    public void createOrUpdate(Integer seasonId,
            Race race,
            Connection conn) throws SQLException {
        if (race.getId() == null || update(seasonId, race, conn) == 0) {
            create(seasonId, race, conn);
        }
    }

    /**
     * Create a new record in Database.
     *
     * @param bean The PK Object to be deleted.
     * @param conn JDBC Connection.
     * @exception SQLException if something is wrong.
     */
    public void delete(Integer raceId,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            Race race = load(raceId, conn);
            deleteDependent(race, conn);

            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, raceId);
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Populate the ResultSet.
     *
     * @param rs The ResultSet.
     * @return The Object to retrieve from DB.
     * @exception SQLException if something is wrong.
     */
    @SuppressWarnings("unchecked")
    private List<Race> getResults(ResultSet rs,
            Connection conn) throws SQLException {
        List<Race> results = new ArrayList<Race>();
        while (rs.next()) {
            Race race = new Race();
            race.setId(rs.getInt("ID"));
            race.setSeasonNumber(rs.getInt("SEASON_NUMBER"));
            race.setNumber(rs.getInt("NUMBER"));
            race.setDate(rs.getTimestamp("RACE_DATE"));
            race.setTrack(trackDAO.load(rs.getInt("TRACK_ID"), conn));
            race.setStatus(statusDAO.load(rs.getInt("STATUS_ID"), conn));
            race.setPractice(practiceDAO.load(rs.getInt("PRACTICE_ID"), conn));
            race.setQualify1(qualifyDAO.load(rs.getInt("QUALIFY1_ID"), conn));
            race.setQualify2(qualifyDAO.load(rs.getInt("QUALIFY2_ID"), conn));
            race.setRaceSettings(settingsDAO.load(rs.getInt("RACE_SETTINGS_ID"), conn));
            race.setStartingFuel(rs.getInt("STARTING_FUEL"));
            race.setFinishFuel(rs.getInt("FINISH_FUEL"));
            race.setFinishTyre(rs.getInt("FINISH_TYRE"));
            String risk = rs.getString("RISKSTARTING");
            race.setRiskStarting(risk != null ? StartingRisk.valueOf(risk) : null);
            race.setRiskClear(rs.getInt("RISKCLEAR"));
            race.setRiskClearWet(rs.getInt("RISKCLEARWET"));
            race.setRiskDefend(rs.getInt("RISKDEFEND"));
            race.setRiskMalfunction(rs.getInt("RISKMALFUNCTION"));
            race.setRiskOvertake(rs.getInt("RISKOVERTAKE"));
            race.setCarStart(carDAO.load(rs.getInt("CAR_START_ID"), conn));
            race.setCarFinish(carDAO.load(rs.getInt("CAR_FINISH_ID"), conn));
            race.setDriverStart(driverDAO.load(rs.getInt("DRIVER_START_ID"), conn));
            race.setDriverFinish(driverDAO.load(rs.getInt("DRIVER_FINISH_ID"), conn));
            race.setFuelStrategy(rs.getString("FUEL_STRATEGY"));
            race.getForecast()[0] = fcDAO.load(rs.getInt("FC_Q1"), conn);
            race.getForecast()[1] = fcDAO.load(rs.getInt("FC_Q2"), conn);
            race.getForecast()[2] = fcDAO.load(rs.getInt("FC_R1"), conn);
            race.getForecast()[3] = fcDAO.load(rs.getInt("FC_R2"), conn);
            race.getForecast()[4] = fcDAO.load(rs.getInt("FC_R3"), conn);
            race.getForecast()[5] = fcDAO.load(rs.getInt("FC_R4"), conn);
            race.setTDStart(tdDAO.load(rs.getInt("TD_START_ID"), conn));
            race.setTDFinish(tdDAO.load(rs.getInt("TD_FINISH_ID"), conn));
            race.setTyreAtStart(loadTyre(rs, "TYRE_AT_START"));
            race.setTyreWhenWet(loadTyre(rs, "TYRE_WHEN_WET"));
            race.setTyreWhenDry(loadTyre(rs, "TYRE_WHEN_DRY"));
            race.setWaitPitWet(rs.getInt("WAIT_PIT_WET"));
            race.setWaitPitDry(rs.getInt("WAIT_PIT_DRY"));
            
            race.setEnergiaInicial(rs.getString("ENERGIA_INICIAL"));
            race.setEnergiaFinal(rs.getString("ENERGIA_FINAL"));


            Integer testSessionId = DBUtil.getIntOrNull(rs, "TEST_SESSION_ID");
            if (testSessionId != null) {
                race.setTestSession(tsDAO.load(testSessionId, conn));
            }

            Integer facilitiesId = DBUtil.getIntOrNull(rs, "FACILITIES_ID");
            if (facilitiesId != null) {
                race.setFacilities(facilitiesDAO.load(facilitiesId, conn));
            }

            List<Lap> laps = rlDAO.loadLapsForRace(race.getId(), conn);
            race.getLaps().addAll(laps != null ? laps : Collections.EMPTY_LIST);

            List<Pit> pits = pitDAO.loadPitsForRace(race.getId(), conn);
            race.getPits().addAll(pits != null ? pits : Collections.EMPTY_LIST);
            results.add(race);

        }
        return results;
    }

    private Tyre loadTyre(ResultSet rs,
            String cl) throws SQLException {
        String tyre = rs.getString(cl);
        Tyre atStart = tyre != null ? Tyre.valueOf(tyre) : null;
        return atStart;
    }

    /**
     * Close JDBC Statement.
     *
     * @param stmt Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     *
     * @param rs ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }

    private void createDependent(Race race,
            Connection conn) throws SQLException {
        if (race.getTrack() != null && race.getTrack().getId() != null) {
            trackDAO.createOrUpdate(race.getTrack(), conn);
        }
        if (race.getStatus() != null) {
            statusDAO.create(race.getStatus(), conn);
        }
        if (race.getPractice() != null) {
            practiceDAO.create(race.getPractice(), conn);
        }
        if (race.getQualify1() != null) {
            qualifyDAO.create(race.getQualify1(), conn);
        }
        if (race.getQualify2() != null) {
            qualifyDAO.create(race.getQualify2(), conn);
        }
        if (race.getRaceSettings() != null) {
            settingsDAO.create(race.getRaceSettings(), conn);
        }
        if (race.getCarStart() != null) {
            carDAO.create(race.getCarStart(), conn);
        }
        if (race.getCarFinish() != null) {
            carDAO.create(race.getCarFinish(), conn);
        }
        if (race.getDriverStart() != null) {
            driverDAO.create(race.getDriverStart(), conn);
        }
        if (race.getDriverFinish() != null) {
            driverDAO.create(race.getDriverFinish(), conn);
        }
        if (race.getTDStart() != null) {
            tdDAO.create(race.getTDStart(), conn);
        }
        if (race.getTDFinish() != null) {
            tdDAO.create(race.getTDFinish(), conn);
        }
        for (int i = 0; i < race.getForecast().length; i++) {
            if (race.getForecast()[i] != null) {
                fcDAO.create(race.getForecast()[i], conn);
            }
        }
        if (race.getTestSession() != null) {
            tsDAO.create(race.getTestSession(), conn);
        }

        if (race.getFacilities() != null) {
            facilitiesDAO.create(race.getFacilities(), conn);
        }
    }

    private List<PersistentEntity> updateDependent(Race race,
            Connection conn) throws SQLException {
        Race saved = load(race.getId(), conn);
        List<PersistentEntity> toDelete = new ArrayList<PersistentEntity>();

        if (saved != null) {
            if (race.getTrack() != null && race.getTrack().getId() != null && !race.getTrack().equals(saved.getTrack())) {
                trackDAO.createOrUpdate(race.getTrack(), conn);
            }

            if (saved.getStatus() == null && race.getStatus() != null) {
                statusDAO.create(race.getStatus(), conn);
            } else if (saved.getStatus() != null && race.getStatus() == null) {
                toDelete.add(saved.getStatus());
            } else if (saved.getStatus() != null && race.getStatus() != null) {
                if (saved.getStatus().getId() == race.getStatus().getId()) {
                    statusDAO.update(race.getStatus(), conn);
                } else {
                    toDelete.add(saved.getStatus());
                    statusDAO.create(race.getStatus(), conn);
                }
            }

            if (saved.getPractice() == null && race.getPractice() != null) {
                practiceDAO.create(race.getPractice(), conn);
            } else if (saved.getPractice() != null && race.getPractice() == null) {
                toDelete.add(saved.getPractice());
            } else if (saved.getPractice() != null && race.getPractice() != null) {
                if (saved.getPractice().getId() == race.getPractice().getId()) {
                    practiceDAO.update(race.getPractice(), conn);
                } else {
                    practiceDAO.create(race.getPractice(), conn);
                    toDelete.add(saved.getPractice());
                }
            }

            if (saved.getQualify1() == null && race.getQualify1() != null) {
                qualifyDAO.create(race.getQualify1(), conn);
            } else if (saved.getQualify1() != null && race.getQualify1() == null) {
                toDelete.add(saved.getQualify1());
            } else if (saved.getQualify1() != null && race.getQualify1() != null) {
                if (saved.getQualify1().getId() == race.getQualify1().getId()) {
                    qualifyDAO.update(race.getQualify1(), conn);
                } else {
                    toDelete.add(saved.getQualify1());
                    qualifyDAO.create(race.getQualify1(), conn);
                }
            }

            if (saved.getQualify2() == null && race.getQualify2() != null) {
                qualifyDAO.create(race.getQualify2(), conn);
            } else if (saved.getQualify2() != null && race.getQualify2() == null) {
                toDelete.add(saved.getQualify2());
            } else if (saved.getQualify2() != null && race.getQualify2() != null) {
                if (saved.getQualify2().getId() == race.getQualify2().getId()) {
                    qualifyDAO.update(race.getQualify2(), conn);
                } else {
                    toDelete.add(saved.getQualify2());
                    qualifyDAO.create(race.getQualify2(), conn);
                }
            }

            if (saved.getRaceSettings() == null && race.getRaceSettings() != null) {
                settingsDAO.create(race.getRaceSettings(), conn);
            } else if (saved.getRaceSettings() != null && race.getRaceSettings() == null) {
                toDelete.add(saved.getRaceSettings());
            } else if (saved.getRaceSettings() != null && race.getRaceSettings() != null) {
                if (saved.getRaceSettings().getId() == race.getRaceSettings().getId()) {
                    settingsDAO.update(race.getRaceSettings(), conn);
                } else {
                    toDelete.add(saved.getRaceSettings());
                    settingsDAO.create(race.getRaceSettings(), conn);
                }
            }

            if (saved.getCarStart() == null && race.getCarStart() != null) {
                carDAO.create(race.getCarStart(), conn);
            } else if (saved.getCarStart() != null && race.getCarStart() == null) {
                toDelete.add(saved.getCarStart());
            } else if (saved.getCarStart() != null && race.getCarStart() != null) {
                if (saved.getCarStart().getId() == race.getCarStart().getId()) {
                    carDAO.update(race.getCarStart(), conn);
                } else {
                    carDAO.create(race.getCarStart(), conn);
                }
            }

            if (saved.getCarFinish() == null && race.getCarFinish() != null) {
                carDAO.create(race.getCarFinish(), conn);
            } else if (saved.getCarFinish() != null && race.getCarFinish() == null) {
                toDelete.add(saved.getCarFinish());
            } else if (saved.getCarFinish() != null && race.getCarFinish() != null) {
                if (saved.getCarFinish().getId() == race.getCarFinish().getId()) {
                    carDAO.update(race.getCarFinish(), conn);
                } else {
                    carDAO.create(race.getCarFinish(), conn);
                }
            }

            if (saved.getDriverStart() == null && race.getDriverStart() != null) {
                driverDAO.create(race.getDriverStart(), conn);
            } else if (saved.getDriverStart() != null && race.getDriverStart() == null) {
                toDelete.add(saved.getDriverStart());
            } else if (saved.getDriverStart() != null && race.getDriverStart() != null) {
                if (saved.getDriverStart().getId() == race.getDriverStart().getId()) {
                    driverDAO.update(race.getDriverStart(), conn);
                } else {
                    driverDAO.create(race.getDriverStart(), conn);
                }
            }

            if (saved.getDriverFinish() == null && race.getDriverFinish() != null) {
                driverDAO.create(race.getDriverFinish(), conn);
            } else if (saved.getDriverFinish() != null && race.getDriverFinish() == null) {
                toDelete.add(saved.getDriverFinish());
            } else if (saved.getDriverFinish() != null && race.getDriverFinish() != null) {
                if (saved.getDriverFinish().getId() == race.getDriverFinish().getId()) {
                    driverDAO.update(race.getDriverFinish(), conn);
                } else {
                    driverDAO.create(race.getDriverFinish(), conn);
                }
            }

            if (saved.getTDStart() == null && race.getTDStart() != null) {
                tdDAO.create(race.getTDStart(), conn);
            } else if (saved.getTDStart() != null && race.getTDStart() == null) {
                toDelete.add(saved.getTDStart());
            } else if (saved.getTDStart() != null && race.getTDStart() != null) {
                if (saved.getTDStart().getId() == race.getTDStart().getId()) {
                    tdDAO.update(race.getTDStart(), conn);
                } else {
                    tdDAO.create(race.getTDStart(), conn);
                }
            }

            if (saved.getTDFinish() == null && race.getTDFinish() != null) {
                tdDAO.create(race.getTDFinish(), conn);
            } else if (saved.getTDFinish() != null && race.getTDFinish() == null) {
                toDelete.add(saved.getTDFinish());
            } else if (saved.getTDFinish() != null && race.getTDFinish() != null) {
                if (saved.getTDFinish().getId() == race.getTDFinish().getId()) {
                    tdDAO.update(race.getTDFinish(), conn);
                } else {
                    tdDAO.create(race.getTDFinish(), conn);
                }
            }

            for (int i = 0; i < race.getForecast().length; i++) {
                if (saved.getForecast()[i] == null && race.getForecast()[i] != null) {
                    fcDAO.create(race.getForecast()[i], conn);
                } else if (saved.getForecast()[i] != null && race.getForecast()[i] == null) {
                    toDelete.add(saved.getForecast()[i]);
                } else if (saved.getForecast()[i] != null && race.getForecast()[i] != null) {
                    if (saved.getForecast()[i].getId() == race.getForecast()[i].getId()) {
                        fcDAO.update(race.getForecast()[i], conn);
                    } else {
                        fcDAO.create(race.getForecast()[i], conn);
                    }
                }
            }

            List<Lap> laps = saved.getLaps();
            for (int i = 0; i < race.getLaps().size(); i++) {
                Lap newLap = race.getLaps().get(i);
                if (i < laps.size()) {
                    Lap savedLap = laps.get(i);
                    if (!savedLap.equals(newLap)) {
                        newLap.setId(savedLap.getId());
                        lapDAO.update(newLap, conn);
                    }
                } else {
                    lapDAO.create(newLap, conn);
                    rlDAO.create(race.getId(), newLap.getId(), conn);
                }
            }
            for (int i = race.getLaps().size(); i < laps.size(); i++) {
                Lap lap = laps.get(i);
                rlDAO.delete(race.getId(), lap.getId(), conn);
                lapDAO.delete(lap.getId(), conn);
            }

            List<Pit> pits = saved.getPits();
            for (int i = 0; i < race.getPits().size(); i++) {
                Pit newPit = race.getPits().get(i);
                if (i < pits.size()) {
                    Pit savedPit = pits.get(i);
                    if (!savedPit.equals(newPit)) {
                        newPit.setId(savedPit.getId());
                        pitDAO.update(saved.getId(), newPit, conn);
                    }
                } else {
                    pitDAO.create(saved.getId(), newPit, conn);
                }
            }
            for (int i = race.getPits().size(); i < pits.size(); i++) {
                Pit pit = pits.get(i);
                pitDAO.delete(pit.getId(), conn);
            }

            if (saved.getTestSession() == null && race.getTestSession() != null) {
                tsDAO.create(race.getTestSession(), conn);
            } else if (saved.getTestSession() != null && race.getTestSession() == null) {
                toDelete.add(saved.getTestSession());
            } else if (saved.getTestSession() != null && race.getTestSession() != null) {
                if (saved.getTestSession().getId() == race.getTestSession().getId()) {
                    tsDAO.update(race.getTestSession(), conn);
                } else {
                    tsDAO.create(race.getTestSession(), conn);
                }
            }

            if (saved.getFacilities() == null && race.getFacilities() != null) {
                facilitiesDAO.create(race.getFacilities(), conn);
            } else if (saved.getFacilities() != null && race.getFacilities() == null) {
                toDelete.add(saved.getFacilities());
            } else if (saved.getFacilities() != null && race.getFacilities() != null) {
                if (saved.getFacilities().getId() == race.getFacilities().getId()) {
                    facilitiesDAO.update(race.getFacilities(), conn);
                } else {
                    facilitiesDAO.create(race.getFacilities(), conn);
                }
            }
        }
        return toDelete;

    }

    private void deleteDependent(Race race,
            Connection conn) throws SQLException {
        if (race.getStatus() != null) {
            statusDAO.delete(race.getStatus().getId(), conn);
        }
        if (race.getPractice() != null) {
            practiceDAO.delete(race.getPractice().getId(), conn);
        }
        if (race.getQualify1() != null) {
            qualifyDAO.delete(race.getQualify1().getId(), conn);
        }
        if (race.getQualify2() != null) {
            qualifyDAO.delete(race.getQualify2().getId(), conn);
        }
        if (race.getRaceSettings() != null) {
            settingsDAO.delete(race.getRaceSettings().getId(), conn);
        }
        if (race.getCarStart() != null) {
            carDAO.delete(race.getCarStart().getId(), conn);
        }
        if (race.getCarFinish() != null) {
            carDAO.delete(race.getCarFinish().getId(), conn);
        }
        if (race.getDriverStart() != null) {
            driverDAO.delete(race.getDriverStart().getId(), conn);
        }
        if (race.getDriverFinish() != null) {
            driverDAO.delete(race.getDriverFinish().getId(), conn);
        }
        if (race.getTDStart() != null) {
            tdDAO.delete(race.getTDStart().getId(), conn);
        }
        if (race.getTDFinish() != null) {
            tdDAO.delete(race.getTDFinish().getId(), conn);
        }
        for (int i = 0; i < race.getForecast().length; i++) {
            if (race.getForecast()[i] != null) {
                fcDAO.delete(race.getForecast()[i].getId(), conn);
            }
        }
    }
}
