/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:51 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.everest.orm;

import static org.gproman.db.DBUtil.getDoubleOrNull;
import static org.gproman.db.DBUtil.getIntOrNull;
import static org.gproman.db.DBUtil.setDoubleParameter;
import static org.gproman.db.DBUtil.setIntParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.everest.dao.EverestTrackDAO;
import org.gproman.model.track.Downforce;
import org.gproman.model.track.FuelConsumption;
import org.gproman.model.track.GripLevel;
import org.gproman.model.track.Overtaking;
import org.gproman.model.track.SuspensionRigidity;
import org.gproman.model.track.Track;
import org.gproman.model.track.TyreWear;

/**
 * This class provides methods to populate DB Table of TRACK
 */
public class EverestTrackDAOImpl implements EverestTrackDAO {

    public static final EverestTrackDAO INSTANCE           = new EverestTrackDAOImpl();

    /* SQL to insert data */
    private static final String         SQL_INSERT         =
                                                                   "INSERT INTO TRACK ("
                                                                           + "ID, NAME, POWER, HANDLING, ACCELERATION, AVG_SPEED, CORNERS, "
                                                                           + "DISTANCE, LAP_DISTANCE, LAPS, TIME_IN_OUT, DOWNFORCE, FUEL_CONSUMPTION, GRIP_LEVEL, "
                                                                           + "OVERTAKING, SUSPENSION, TYRE_WEAR, BRAKESWF, CHASSISWF, COOLINGWF, ELECTRONICSWF, "
                                                                           + "ENGINEWF, FRONT_WINGWF, GEARBOXWF, REAR_WINGWF, SIDEPODSWF, SUSPENSIONWF, UNDERBODYWF, "
                                                                           + "FUEL_COEF, COMPOUND_COEF, SETUP_WINGS, SETUP_ENGINE, SETUP_BRAKES, SETUP_GEAR, SETUP_SUSPENSION, "
                                                                           + "WING_SPLIT, WING_NORMAL, F_CON, F_AGR, F_EXP, F_TEI, F_ENG, F_ELE, F_HUM, F_FUE "
                                                                           + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

    /* SQL to select data */
    private static final String         SQL_SELECT         =
                                                                   "SELECT "
                                                                           + "ID, NAME, POWER, HANDLING, ACCELERATION, AVG_SPEED, CORNERS, "
                                                                           + "DISTANCE, LAP_DISTANCE, LAPS, TIME_IN_OUT, DOWNFORCE, FUEL_CONSUMPTION, GRIP_LEVEL, "
                                                                           + "OVERTAKING, SUSPENSION, TYRE_WEAR, BRAKESWF, CHASSISWF, COOLINGWF, ELECTRONICSWF, "
                                                                           + "ENGINEWF, FRONT_WINGWF, GEARBOXWF, REAR_WINGWF, SIDEPODSWF, SUSPENSIONWF, UNDERBODYWF, "
                                                                           + "FUEL_COEF, COMPOUND_COEF, SETUP_WINGS, SETUP_ENGINE, SETUP_BRAKES, SETUP_GEAR, SETUP_SUSPENSION, "
                                                                           + "WING_SPLIT, WING_NORMAL, F_CON, F_AGR, F_EXP, F_TEI, F_ENG, F_ELE, F_HUM, F_FUE "
                                                                           + "FROM TRACK WHERE "
                                                                           + "ID = ?";

    private static final String         SQL_SELECT_BY_NAME =
                                                                   "SELECT "
                                                                           + "ID, NAME, POWER, HANDLING, ACCELERATION, AVG_SPEED, CORNERS, "
                                                                           + "DISTANCE, LAP_DISTANCE, LAPS, TIME_IN_OUT, DOWNFORCE, FUEL_CONSUMPTION, GRIP_LEVEL, "
                                                                           + "OVERTAKING, SUSPENSION, TYRE_WEAR, BRAKESWF, CHASSISWF, COOLINGWF, ELECTRONICSWF, "
                                                                           + "ENGINEWF, FRONT_WINGWF, GEARBOXWF, REAR_WINGWF, SIDEPODSWF, SUSPENSIONWF, UNDERBODYWF, "
                                                                           + "FUEL_COEF, COMPOUND_COEF, SETUP_WINGS, SETUP_ENGINE, SETUP_BRAKES, SETUP_GEAR, SETUP_SUSPENSION, "
                                                                           + "WING_SPLIT, WING_NORMAL, F_CON, F_AGR, F_EXP, F_TEI, F_ENG, F_ELE, F_HUM, F_FUE "
                                                                           + "FROM TRACK WHERE "
                                                                           + "NAME = ?";

    private static final String         SQL_SELECT_ALL     =
                                                                   "SELECT "
                                                                           + "ID, NAME, POWER, HANDLING, ACCELERATION, AVG_SPEED, CORNERS, "
                                                                           + "DISTANCE, LAP_DISTANCE, LAPS, TIME_IN_OUT, DOWNFORCE, FUEL_CONSUMPTION, GRIP_LEVEL, "
                                                                           + "OVERTAKING, SUSPENSION, TYRE_WEAR, BRAKESWF, CHASSISWF, COOLINGWF, ELECTRONICSWF, "
                                                                           + "ENGINEWF, FRONT_WINGWF, GEARBOXWF, REAR_WINGWF, SIDEPODSWF, SUSPENSIONWF, UNDERBODYWF, "
                                                                           + "FUEL_COEF, COMPOUND_COEF, SETUP_WINGS, SETUP_ENGINE, SETUP_BRAKES, SETUP_GEAR, SETUP_SUSPENSION, "
                                                                           + "WING_SPLIT, WING_NORMAL, F_CON, F_AGR, F_EXP, F_TEI, F_ENG, F_ELE, F_HUM, F_FUE "
                                                                           + "FROM TRACK "
                                                                           + "ORDER BY NAME ";

    /* SQL to update data */
    private static final String         SQL_UPDATE         =
                                                                   "UPDATE TRACK SET "
                                                                           + "NAME = ?, POWER = ?, HANDLING = ?, ACCELERATION = ?, AVG_SPEED = ?, CORNERS = ?, DISTANCE = ?,  "
                                                                           + "LAP_DISTANCE = ?, LAPS = ?, TIME_IN_OUT = ?, DOWNFORCE = ?, FUEL_CONSUMPTION = ?, GRIP_LEVEL = ?, OVERTAKING = ?,  "
                                                                           + "SUSPENSION = ?, TYRE_WEAR = ?, BRAKESWF = ?, CHASSISWF = ?, COOLINGWF = ?, ELECTRONICSWF = ?, ENGINEWF = ?,  "
                                                                           + "FRONT_WINGWF = ?, GEARBOXWF = ?, REAR_WINGWF = ?, SIDEPODSWF = ?, SUSPENSIONWF = ?, UNDERBODYWF = ?, "
                                                                           + "FUEL_COEF = ?, COMPOUND_COEF = ?, SETUP_WINGS = ?, SETUP_ENGINE = ?, SETUP_BRAKES = ?, SETUP_GEAR = ?, SETUP_SUSPENSION = ?, "
                                                                           + "WING_SPLIT = ?, WING_NORMAL = ?, F_CON = ?, F_AGR = ?, F_EXP = ?, F_TEI = ?, F_ENG = ?, F_ELE = ?, F_HUM = ?, F_FUE = ? "
                                                                           + "WHERE "
                                                                           + "ID = ?";

    /* SQL to delete data */
    private static final String         SQL_DELETE         =
                                                                   "DELETE FROM TRACK WHERE "
                                                                           + "ID = ?";

    private EverestTrackDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Track bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            int index = 1;
            ps.setInt(index++, bean.getId());
            ps.setString(index++, bean.getName());
            ps.setInt(index++, bean.getPower());
            ps.setInt(index++, bean.getHandling());
            ps.setInt(index++, bean.getAcceleration());
            ps.setDouble(index++, bean.getAvgSpeed());
            ps.setInt(index++, bean.getCorners());
            ps.setDouble(index++, bean.getDistance());
            ps.setDouble(index++, bean.getLapDistance());
            ps.setInt(index++, bean.getLaps());
            ps.setInt(index++, bean.getTimeInOut());
            ps.setString(index++, ifNotNull(bean.getDownforce()));
            ps.setString(index++, ifNotNull(bean.getFuelConsumption()));
            ps.setString(index++, ifNotNull(bean.getGripLevel()));
            ps.setString(index++, ifNotNull(bean.getOvertaking()));
            ps.setString(index++, ifNotNull(bean.getSuspension()));
            ps.setString(index++, ifNotNull(bean.getTyreWear()));
            ps.setBigDecimal(index++, bean.getWearFactors().getBrakesWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getChassisWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getCoolingWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getElectronicsWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getEngineWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getFrontWingWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getGearboxWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getRearWingWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getSidepodsWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getSuspensionWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getUnderbodyWF());
            ps.setBigDecimal(index++, bean.getFuelCoef());
            ps.setBigDecimal(index++, bean.getCompoundCoef());
            setIntParameter(ps, index++, bean.getSetupWings());
            setIntParameter(ps, index++, bean.getSetupEngine());
            setIntParameter(ps, index++, bean.getSetupBrakes());
            setIntParameter(ps, index++, bean.getSetupGear());
            setIntParameter(ps, index++, bean.getSetupSuspension());
            setIntParameter(ps, index++, bean.getWingSplit());
            ps.setBoolean(index++, bean.isWingNormal());
            setIntParameter(ps, index++, bean.getFCon());
            setIntParameter(ps, index++, bean.getFAgr());
            setIntParameter(ps, index++, bean.getFExp());
            setIntParameter(ps, index++, bean.getFTeI());
            setIntParameter(ps, index++, bean.getFEng());
            setIntParameter(ps, index++, bean.getFEle());
            setDoubleParameter(ps, index++, bean.getFHum());
            setDoubleParameter(ps, index++, bean.getFFue());
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Track load(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<Track> results = getResults(rs);
            if (results.size() > 0)
                return results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Track loadByName(String name, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_BY_NAME);
            ps.setString(1, name);
            rs = ps.executeQuery();
            List<Track> results = getResults(rs);
            if (results.size() > 0)
                return results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    public List<Track> loadAllTracks(Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_ALL);
            rs = ps.executeQuery();
            return getResults(rs);
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(Track bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            int index = 1;
            ps.setString(index++, bean.getName());
            ps.setInt(index++, bean.getPower());
            ps.setInt(index++, bean.getHandling());
            ps.setInt(index++, bean.getAcceleration());
            ps.setDouble(index++, bean.getAvgSpeed());
            ps.setInt(index++, bean.getCorners());
            ps.setDouble(index++, bean.getDistance());
            ps.setDouble(index++, bean.getLapDistance());
            ps.setInt(index++, bean.getLaps());
            ps.setInt(index++, bean.getTimeInOut());
            ps.setString(index++, ifNotNull(bean.getDownforce()));
            ps.setString(index++, ifNotNull(bean.getFuelConsumption()));
            ps.setString(index++, ifNotNull(bean.getGripLevel()));
            ps.setString(index++, ifNotNull(bean.getOvertaking()));
            ps.setString(index++, ifNotNull(bean.getSuspension()));
            ps.setString(index++, ifNotNull(bean.getTyreWear()));
            ps.setBigDecimal(index++, bean.getWearFactors().getBrakesWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getChassisWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getCoolingWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getElectronicsWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getEngineWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getFrontWingWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getGearboxWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getRearWingWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getSidepodsWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getSuspensionWF());
            ps.setBigDecimal(index++, bean.getWearFactors().getUnderbodyWF());
            ps.setBigDecimal(index++, bean.getFuelCoef());
            ps.setBigDecimal(index++, bean.getCompoundCoef());
            setIntParameter(ps, index++, bean.getSetupWings());
            setIntParameter(ps, index++, bean.getSetupEngine());
            setIntParameter(ps, index++, bean.getSetupBrakes());
            setIntParameter(ps, index++, bean.getSetupGear());
            setIntParameter(ps, index++, bean.getSetupSuspension());
            setIntParameter(ps, index++, bean.getWingSplit());
            ps.setBoolean(index++, bean.isWingNormal());
            setIntParameter(ps, index++, bean.getFCon());
            setIntParameter(ps, index++, bean.getFAgr());
            setIntParameter(ps, index++, bean.getFExp());
            setIntParameter(ps, index++, bean.getFTeI());
            setIntParameter(ps, index++, bean.getFEng());
            setIntParameter(ps, index++, bean.getFEle());
            setDoubleParameter(ps, index++, bean.getFHum());
            setDoubleParameter(ps, index++, bean.getFFue());
            ps.setInt(index++, bean.getId());
            return ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    private String ifNotNull(Object obj) {
        return obj != null ? obj.toString() : null;
    }

    @Override
    public void createOrUpdate(Track track, Connection conn) throws SQLException {
        if (update(track, conn) == 0) {
            create(track, conn);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<Track> getResults(ResultSet rs) throws SQLException {
        List<Track> results = new ArrayList<Track>();
        while (rs.next()) {
            Track bean = new Track();
            bean.setId(rs.getInt("ID"));
            bean.setName(rs.getString("NAME"));
            if (rs.wasNull())
                bean.setName(null);
            bean.setPower(rs.getInt("POWER"));
            bean.setHandling(rs.getInt("HANDLING"));
            bean.setAcceleration(rs.getInt("ACCELERATION"));
            bean.setAvgSpeed(rs.getDouble("AVG_SPEED"));
            bean.setCorners(rs.getInt("CORNERS"));
            bean.setDistance(rs.getDouble("DISTANCE"));
            bean.setLapDistance(rs.getDouble("LAP_DISTANCE"));
            bean.setLaps(rs.getInt("LAPS"));
            bean.setTimeInOut(rs.getInt("TIME_IN_OUT"));

            String df = rs.getString("DOWNFORCE");
            bean.setDownforce(df != null ? Downforce.valueOf(df) : null);

            String fc = rs.getString("FUEL_CONSUMPTION");
            bean.setFuelConsumption(fc != null ? FuelConsumption.valueOf(fc) : null);

            String gl = rs.getString("GRIP_LEVEL");
            bean.setGripLevel(gl != null ? GripLevel.valueOf(gl) : null);

            String ot = rs.getString("OVERTAKING");
            bean.setOvertaking(ot != null ? Overtaking.valueOf(ot) : null);

            String sp = rs.getString("SUSPENSION");
            bean.setSuspension(sp != null ? SuspensionRigidity.valueOf(sp) : null);

            String tw = rs.getString("TYRE_WEAR");
            bean.setTyreWear(tw != null ? TyreWear.valueOf(tw) : null);

            bean.getWearFactors().setBrakesWF(rs.getBigDecimal("BRAKESWF"));
            bean.getWearFactors().setChassisWF(rs.getBigDecimal("CHASSISWF"));
            bean.getWearFactors().setCoolingWF(rs.getBigDecimal("COOLINGWF"));
            bean.getWearFactors().setElectronicsWF(rs.getBigDecimal("ELECTRONICSWF"));
            bean.getWearFactors().setEngineWF(rs.getBigDecimal("ENGINEWF"));
            bean.getWearFactors().setFrontWingWF(rs.getBigDecimal("FRONT_WINGWF"));
            bean.getWearFactors().setGearboxWF(rs.getBigDecimal("GEARBOXWF"));
            bean.getWearFactors().setRearWingWF(rs.getBigDecimal("REAR_WINGWF"));
            bean.getWearFactors().setSidepodsWF(rs.getBigDecimal("SIDEPODSWF"));
            bean.getWearFactors().setSuspensionWF(rs.getBigDecimal("SUSPENSIONWF"));
            bean.getWearFactors().setUnderbodyWF(rs.getBigDecimal("UNDERBODYWF"));
            bean.setFuelCoef(rs.getBigDecimal("FUEL_COEF"));
            bean.setCompoundCoef(rs.getBigDecimal("COMPOUND_COEF"));

            bean.setSetupWings(getIntOrNull(rs, "SETUP_WINGS"));
            bean.setSetupEngine(getIntOrNull(rs, "SETUP_ENGINE"));
            bean.setSetupBrakes(getIntOrNull(rs, "SETUP_BRAKES"));
            bean.setSetupGear(getIntOrNull(rs, "SETUP_GEAR"));
            bean.setSetupSuspension(getIntOrNull(rs, "SETUP_SUSPENSION"));
            bean.setWingSplit(getIntOrNull(rs, "WING_SPLIT"));
            bean.setWingNormal(rs.getBoolean("WING_NORMAL"));

            bean.setFCon(getIntOrNull(rs, "F_CON"));
            bean.setFAgr(getIntOrNull(rs, "F_AGR"));
            bean.setFExp(getIntOrNull(rs, "F_EXP"));
            bean.setFTeI(getIntOrNull(rs, "F_TEI"));
            bean.setFEng(getIntOrNull(rs, "F_ENG"));
            bean.setFEle(getIntOrNull(rs, "F_ELE"));
            bean.setFHum(getDoubleOrNull(rs, "F_HUM"));
            bean.setFFue(getDoubleOrNull(rs, "F_FUE"));

            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }
}