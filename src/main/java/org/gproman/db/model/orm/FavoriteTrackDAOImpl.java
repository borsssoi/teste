/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.model.dao.FavoriteTrackDAO;
import org.gproman.db.model.dao.TrackDAO;
import org.gproman.model.track.Track;

/**
 * This class provides methods to populate DB Table of FAVORITE_TRACK
 */
public class FavoriteTrackDAOImpl implements FavoriteTrackDAO {
    
    public static final FavoriteTrackDAO INSTANCE = new FavoriteTrackDAOImpl();
    
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO FAVORITE_TRACK ("
        + "DRIVER_ID, TRACK_ID"
        + ") VALUES (?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "DRIVER_ID, TRACK_ID "
        + "FROM FAVORITE_TRACK WHERE "
        + "DRIVER_ID = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM FAVORITE_TRACK WHERE "
        + "DRIVER_ID = ? AND TRACK_ID = ?";
    
    private static final String SQL_DELETE_FAVORITE_TRACKS =
            "DELETE FROM FAVORITE_TRACK WHERE "
            + "DRIVER_ID = ?";
    
    
    private TrackDAO trackDAO = TrackDAOImpl.INSTANCE;
    
    private FavoriteTrackDAOImpl() {}

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Integer driverId, Integer trackId, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, driverId);
            ps.setInt(2, trackId);
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrieve a record from Database.
     * @param beanKey   The PK Object to be retrieved.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public List<Track> loadFavoriteTracks(Integer driverId, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, driverId);
            rs = ps.executeQuery();
            List<Track> results = getResults(rs, conn);
            return results;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer driverId, Integer trackId, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, driverId);
            ps.setInt(2, trackId);
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    @Override
    public void deleteFavoriteTracks(Integer driverId,
                                     Connection conn) throws SQLException {
        PreparedStatement ps1 = null;
        try {
            ps1 = conn.prepareStatement(SQL_DELETE_FAVORITE_TRACKS);
            ps1.setInt(1, driverId);
            ps1.executeUpdate();
        }finally {
            close(ps1);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<Track> getResults(ResultSet rs, Connection conn) throws SQLException {
        List<Track> results = new ArrayList<Track>();
        while (rs.next()) {
            results.add( trackDAO.load( rs.getInt("TRACK_ID"), conn ));
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}