/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.model.dao.IdGeneratorDAO;
import org.gproman.db.model.dao.ManagerDAO;
import org.gproman.model.Manager;

/**
 * This class provides methods to populate DB Table of MANAGER
 */
public class ManagerDAOImpl implements ManagerDAO {
    
    public static final ManagerDAO INSTANCE = new ManagerDAOImpl();
    
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO MANAGER ("
        + "ID, GROUP_NAME, LOGIN, NAME"
        + ") VALUES (?, ?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "ID, GROUP_NAME, LOGIN, NAME "
        + "FROM MANAGER WHERE "
        + "ID = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE MANAGER SET "
        + "GROUP_NAME = ?, LOGIN = ?, NAME = ? "
        + "WHERE "
        + "ID = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM MANAGER WHERE "
        + "ID = ?";
    
    private ManagerDAOImpl() {}

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Manager bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            bean.setId( IdGeneratorDAO.INSTANCE.getNextId( conn ) );
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, bean.getId());
            ps.setString(2, bean.getGroup());
            ps.setString(3, bean.getLogin());
            ps.setString(4, bean.getName());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Manager load(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<Manager> results = getResults(rs);
            if (results.size() > 0)
                return (Manager) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(Manager bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, bean.getGroup());
            ps.setString(2, bean.getLogin());
            ps.setString(3, bean.getName());
            ps.setInt(4, bean.getId());
            return ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    @Override
    public void createOrUpdate(Manager bean,
                               Connection conn) throws SQLException {
        if( bean.getId() == null || update( bean, conn ) == 0 ) {
            create( bean, conn );
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<Manager> getResults(ResultSet rs) throws SQLException {
        List<Manager> results = new ArrayList<Manager>();
        while (rs.next()) {
            Manager bean = new Manager();
            bean.setId(rs.getInt("ID"));
            bean.setGroup(rs.getString("GROUP_NAME"));
            bean.setLogin(rs.getString("LOGIN"));
            bean.setName(rs.getString("NAME"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}