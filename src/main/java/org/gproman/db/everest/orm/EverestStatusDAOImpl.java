/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.everest.orm;

import static org.gproman.db.DBUtil.setIntParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.gproman.db.everest.dao.EverestStatusDAO;
import org.gproman.model.everest.EverestMetrics;
import org.gproman.model.everest.EverestStatus;
import org.gproman.model.everest.WeatherType;
import org.gproman.model.season.TyreSupplier;

/**
 * This class provides methods to populate DB Table of APPLICATION_STATUS
 */
public class EverestStatusDAOImpl implements EverestStatusDAO {

    public static final EverestStatusDAO INSTANCE                     = new EverestStatusDAOImpl();

    /* SQL to select data */
    private static final String          SQL_SELECT                   =
                                                                              "SELECT "
                                                                                      + "ID, SCHEMA_VERSION "
                                                                                      + "FROM EVEREST_STATUS WHERE "
                                                                                      + "ID = ?";

    private static final String          SQL_SEASON_COUNT             =
                                                                              "select count(*) from (select distinct season_number from race)";

    private static final String          SQL_RACE_COUNT               =
                                                                              "select count(*) from (select distinct season_number, race_number from race)";

    private static final String          SQL_TELEMETRY_COUNT          =
                                                                              "select count(*) from race";

    private static final String          SQL_STINT_COUNT              =
                                                                              "select count(*) from stint";
    
    private static final String          SQL_LATEST_SEASON            = 
                                                                              "select max(SEASON_NUMBER) latest_season from RACE";

    private static final String          SQL_TELEMETRIES_PER_SEASON   =
                                                                              "select SEASON_NUMBER, count(*) c from race" +
                                                                                      " group by SEASON_NUMBER" +
                                                                                      " order by SEASON_NUMBER";

    private static final String          SQL_TELEMETRIES_PER_RACE  =
                                                                              "select RACE_NUMBER, count(*) c from race" +
                                                                                      " where SEASON_NUMBER = ?" +
                                                                                      " group by RACE_NUMBER" +
                                                                                      " order by RACE_NUMBER";

    private static final String          SQL_STINTS_PER_WEATHER       =
                                                                              "select weather_type, count(*) c from stint group by WEATHER_TYPE";

    private static final String          SQL_TELEMETRIES_PER_SUPPLIER =
                                                                              "select TYRE_SUPPLIER, count(*) c from race where TYRE_SUPPLIER is not null group by TYRE_SUPPLIER";

    /* SQL to update data */
    private static final String          SQL_UPDATE                   =
                                                                              "UPDATE EVEREST_STATUS SET "
                                                                                      + "SCHEMA_VERSION = ? "
                                                                                      + "WHERE "
                                                                                      + "ID = ?";

    private EverestStatusDAOImpl() {
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public EverestStatus load(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<EverestStatus> results = getResults(rs);
            if (results.size() > 0)
                return results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(EverestStatus bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            setIntParameter(ps, 1, bean.getSchemaVersion());
            ps.setInt(2, bean.getId());
            return ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<EverestStatus> getResults(ResultSet rs) throws SQLException {
        List<EverestStatus> results = new ArrayList<EverestStatus>();
        while (rs.next()) {
            EverestStatus bean = new EverestStatus();
            bean.setId(rs.getInt("ID"));
            bean.setSchemaVersion(rs.getInt("SCHEMA_VERSION"));
            results.add(bean);
        }
        return results;
    }

    @Override
    public EverestMetrics loadMetrics(Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        EverestMetrics em = new EverestMetrics();
        try {
            ps = conn.prepareStatement(SQL_SEASON_COUNT);
            rs = ps.executeQuery();
            if (rs.next()) {
                em.setSeasons(rs.getInt(1));
            }
        } finally {
            close(rs);
            close(ps);
        }
        try {
            ps = conn.prepareStatement(SQL_RACE_COUNT);
            rs = ps.executeQuery();
            if (rs.next()) {
                em.setRaces(rs.getInt(1));
            }
        } finally {
            close(rs);
            close(ps);
        }
        try {
            ps = conn.prepareStatement(SQL_TELEMETRY_COUNT);
            rs = ps.executeQuery();
            if (rs.next()) {
                em.setTelemetries(rs.getInt(1));
            }
        } finally {
            close(rs);
            close(ps);
        }
        try {
            ps = conn.prepareStatement(SQL_STINT_COUNT);
            rs = ps.executeQuery();
            if (rs.next()) {
                em.setStints(rs.getInt(1));
            }
        } finally {
            close(rs);
            close(ps);
        }
        try {
            ps = conn.prepareStatement(SQL_LATEST_SEASON);
            rs = ps.executeQuery();
            if (rs.next()) {
                em.setLatestSeason(rs.getInt(1));
            }
        } finally {
            close(rs);
            close(ps);
        }
        try {
            ps = conn.prepareStatement(SQL_TELEMETRIES_PER_SEASON);
            rs = ps.executeQuery();
            Map<Integer, Integer> racesPerSeason = new TreeMap<Integer, Integer>();
            while (rs.next()) {
                racesPerSeason.put(rs.getInt("SEASON_NUMBER"), rs.getInt("C"));
            }
            em.setTelemetriesPerSeason(racesPerSeason);
        } finally {
            close(rs);
            close(ps);
        }
        if( em.getLatestSeason() != null ) {
            try {
                ps = conn.prepareStatement(SQL_TELEMETRIES_PER_RACE);
                ps.setInt(1, em.getLatestSeason());
                rs = ps.executeQuery();
                Map<Integer, Integer> telemetriesPerRace = new TreeMap<Integer, Integer>();
                while (rs.next()) {
                    telemetriesPerRace.put(rs.getInt("RACE_NUMBER"), rs.getInt("C"));
                }
                em.setTelemetriesPerRaceCurrentSeason(telemetriesPerRace);
            } finally {
                close(rs);
                close(ps);
            }
        }
//        try {
//            ps = conn.prepareStatement(SQL_STINTS_PER_WEATHER);
//            rs = ps.executeQuery();
//            Map<WeatherType, Integer> stintsPerWeather = new TreeMap<WeatherType, Integer>();
//            while (rs.next()) {
//                stintsPerWeather.put(WeatherType.determineWeather(rs.getString("WEATHER_TYPE")), rs.getInt("C"));
//            }
//            em.setStintsPerWeather(stintsPerWeather);
//        } finally {
//            close(rs);
//            close(ps);
//        }
        try {
            ps = conn.prepareStatement(SQL_TELEMETRIES_PER_SUPPLIER);
            rs = ps.executeQuery();
            Map<TyreSupplier, Integer> telemetriesPerSupplier = new TreeMap<TyreSupplier, Integer>();
            while (rs.next()) {
                telemetriesPerSupplier.put(TyreSupplier.determineTyre(rs.getString("TYRE_SUPPLIER")), rs.getInt("C"));
            }
            em.setTelemetriesPerSupplier(telemetriesPerSupplier);
        } finally {
            close(rs);
            close(ps);
        }
        return em;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }
}