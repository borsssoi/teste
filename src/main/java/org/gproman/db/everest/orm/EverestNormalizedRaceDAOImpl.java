/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.everest.orm;

import static org.gproman.db.DBUtil.getDoubleOrNull;
import static org.gproman.db.DBUtil.getIntOrNull;
import static org.gproman.db.DBUtil.setDoubleParameter;
import static org.gproman.db.DBUtil.setIntParameter;
import static org.gproman.db.DBUtil.setParameter;
import static org.gproman.db.DBUtil.setStringParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.gproman.db.everest.dao.EverestCarDAO;
import org.gproman.db.everest.dao.EverestCarSettingsDAO;
import org.gproman.db.everest.dao.EverestDriverDAO;
import org.gproman.db.everest.dao.EverestLapDAO;
import org.gproman.db.everest.dao.EverestRaceDAO;
import org.gproman.db.everest.dao.EverestRaceLapDAO;
import org.gproman.db.everest.dao.EverestStintDAO;
import org.gproman.db.everest.dao.EverestTechDirectorDAO;
import org.gproman.db.everest.dao.EverestTrackDAO;
import org.gproman.db.everest.dao.SearchParams;
import org.gproman.model.PersistentEntity;
import org.gproman.model.car.Car;
import org.gproman.model.driver.Driver;
import org.gproman.model.everest.NormalizedLap;
import org.gproman.model.everest.NormalizedRace;
import org.gproman.model.everest.NormalizedRace.RaceStatus;
import org.gproman.model.everest.NormalizedRace.TDStatus;
import org.gproman.model.everest.NormalizedStint;
import org.gproman.model.race.CarSettings;
import org.gproman.model.season.TyreSupplier;
import org.gproman.model.staff.TechDirector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class provides methods to populate DB Table of RACE
 */
public class EverestNormalizedRaceDAOImpl
        implements
        EverestRaceDAO {
    private static final Logger logger = LoggerFactory.getLogger( EverestNormalizedRaceDAOImpl.class );

    public static final EverestRaceDAO INSTANCE                  = new EverestNormalizedRaceDAOImpl();

    /* SQL to insert data */
    private static final String        SQL_INSERT                =
                                                                         "INSERT INTO RACE ("
                                                                                 + "SEASON_NUMBER, RACE_NUMBER, MANAGER_NAME, GROUP_NAME, TRACK_ID, "
                                                                                 + "RACE_STATUS, TYRE_SUPPLIER, RACE_SETTINGS_ID, RISK_CLEAR, RISK_CLEAR_WET, RISK_DEFEND, "
                                                                                 + "RISK_MALFUNCTION, RISK_OVERTAKE, CAR_START_ID, CAR_FINISH_ID, CAR_WEAR_ID, "
                                                                                 + "DRIVER_START_ID, DRIVER_FINISH_ID, TD_STATUS, TD_ID, "
                                                                                 + "FUEL_START, FUEL_FINISH, FUEL_USED, DISTANCE, "
                                                                                 + "AVG_TEMP, AVG_HUM, TOOL, URL "
                                                                                 + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

    /* SQL to select data */
    private static final String        SQL_SELECT                =
                                                                         "SELECT "
                                                                                 + "ID, SEASON_NUMBER, RACE_NUMBER, MANAGER_NAME, GROUP_NAME, TRACK_ID, "
                                                                                 + "RACE_STATUS, TYRE_SUPPLIER, RACE_SETTINGS_ID, RISK_CLEAR, RISK_CLEAR_WET, RISK_DEFEND, "
                                                                                 + "RISK_MALFUNCTION, RISK_OVERTAKE, CAR_START_ID, CAR_FINISH_ID, CAR_WEAR_ID, "
                                                                                 + "DRIVER_START_ID, DRIVER_FINISH_ID, TD_STATUS, TD_ID, "
                                                                                 + "FUEL_START, FUEL_FINISH, FUEL_USED, DISTANCE, "
                                                                                 + "AVG_TEMP, AVG_HUM, TOOL, URL "
                                                                                 + "FROM RACE WHERE "
                                                                                 + "ID = ?";

    private static final String        SQL_SELECT_BY_MANAGER     =
                                                                         "SELECT "
                                                                                 + "ID, SEASON_NUMBER, RACE_NUMBER, MANAGER_NAME, GROUP_NAME, TRACK_ID, "
                                                                                 + "RACE_STATUS, TYRE_SUPPLIER, RACE_SETTINGS_ID, RISK_CLEAR, RISK_CLEAR_WET, RISK_DEFEND, "
                                                                                 + "RISK_MALFUNCTION, RISK_OVERTAKE, CAR_START_ID, CAR_FINISH_ID, CAR_WEAR_ID, "
                                                                                 + "DRIVER_START_ID, DRIVER_FINISH_ID, TD_STATUS, TD_ID, "
                                                                                 + "FUEL_START, FUEL_FINISH, FUEL_USED, DISTANCE, "
                                                                                 + "AVG_TEMP, AVG_HUM, TOOL, URL "
                                                                                 + "FROM RACE WHERE "
                                                                                 + "MANAGER_NAME = ? AND SEASON_NUMBER = ? AND RACE_NUMBER = ? ";

    private static final String        SQL_SELECT_BY_SEASON_RACE =
                                                                         "SELECT "
                                                                                 + "ID, SEASON_NUMBER, RACE_NUMBER, MANAGER_NAME, GROUP_NAME, TRACK_ID, "
                                                                                 + "RACE_STATUS, TYRE_SUPPLIER, RACE_SETTINGS_ID, RISK_CLEAR, RISK_CLEAR_WET, RISK_DEFEND, "
                                                                                 + "RISK_MALFUNCTION, RISK_OVERTAKE, CAR_START_ID, CAR_FINISH_ID, CAR_WEAR_ID, "
                                                                                 + "DRIVER_START_ID, DRIVER_FINISH_ID, TD_STATUS, TD_ID, "
                                                                                 + "FUEL_START, FUEL_FINISH, FUEL_USED, DISTANCE, "
                                                                                 + "AVG_TEMP, AVG_HUM, TOOL, URL "
                                                                                 + "FROM RACE WHERE "
                                                                                 + "SEASON_NUMBER = ? AND RACE_NUMBER = ? ";

    private static final String        SQL_SELECT_BY_PARAMS      =
                                                                         "SELECT DISTINCT R.* " +
                                                                                 "  FROM RACE R " +
                                                                                 "  JOIN STINT S ON S.RACE_ID = R.ID " +
                                                                                 "  LEFT JOIN DRIVER D ON D.ID = R.DRIVER_START_ID " +
                                                                                 "  LEFT JOIN CAR C ON C.ID = R.CAR_START_ID " +
                                                                                 "  LEFT JOIN CAR_PART CP ON CP.ID = C.SUSPENSION_PARTID " +
                                                                                 "  LEFT JOIN TYRE_SUPPLIER TS ON TS.NAME = R.TYRE_SUPPLIER  AND TS.SEASON_NUMBER = R.SEASON_NUMBER " +
                                                                                 "  LEFT JOIN TRACK T ON T.ID = R.TRACK_ID ";

    /* SQL to update data */
    private static final String        SQL_UPDATE                =
                                                                         "UPDATE RACE SET "
                                                                                 + "SEASON_NUMBER = ?, RACE_NUMBER = ?, MANAGER_NAME = ?, GROUP_NAME = ?, TRACK_ID = ?, "
                                                                                 + "RACE_STATUS = ?, TYRE_SUPPLIER = ?, RACE_SETTINGS_ID = ?, RISK_CLEAR = ?, RISK_CLEAR_WET = ?, RISK_DEFEND = ?, "
                                                                                 + "RISK_MALFUNCTION = ?, RISK_OVERTAKE = ?, CAR_START_ID = ?, CAR_FINISH_ID = ?, CAR_WEAR_ID = ?, "
                                                                                 + "DRIVER_START_ID = ?, DRIVER_FINISH_ID = ?, TD_STATUS = ?, TD_ID = ?, "
                                                                                 + "FUEL_START = ?, FUEL_FINISH = ?, FUEL_USED = ?, DISTANCE = ?, "
                                                                                 + "AVG_TEMP = ?, AVG_HUM = ?, TOOL = ?, URL = ? "
                                                                                 + "WHERE "
                                                                                 + "ID = ?";

    /* SQL to delete data */
    private static final String        SQL_DELETE                =
                                                                         "DELETE FROM RACE WHERE ID = ?";

    private EverestTrackDAO            trackDAO                  = EverestTrackDAOImpl.INSTANCE;
    private EverestCarSettingsDAO      settingsDAO               = EverestCarSettingsDAOImpl.INSTANCE;
    private EverestCarDAO              carDAO                    = EverestCarDAOImpl.INSTANCE;
    private EverestDriverDAO           driverDAO                 = EverestDriverDAOImpl.INSTANCE;
    private EverestLapDAO              lapDAO                    = EverestLapDAOImpl.INSTANCE;
    private EverestRaceLapDAO          rlDAO                     = EverestRaceLapDAOImpl.INSTANCE;
    private EverestStintDAO            stintDAO                  = EverestStintDAOImpl.INSTANCE;
    private EverestTechDirectorDAO     tdDAO                     = EverestTechDirectorDAOImpl.INSTANCE;

    private EverestNormalizedRaceDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param race   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(NormalizedRace race,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            createDependent(race, conn);
            ps = conn.prepareStatement(SQL_INSERT);
            int index = 1;
            setIntParameter(ps, index++, race.getSeasonNumber());
            setIntParameter(ps, index++, race.getRaceNumber());
            setStringParameter(ps, index++, race.getManager());
            setStringParameter(ps, index++, race.getGroup());
            setParameter(ps, index++, race.getTrack());
            setStringParameter(ps, index++, race.getRaceStatus());
            setStringParameter(ps, index++, race.getSupplier());
            setParameter(ps, index++, race.getRaceSettings());
            setIntParameter(ps, index++, race.getRiskClear());
            setIntParameter(ps, index++, race.getRiskClearWet());
            setIntParameter(ps, index++, race.getRiskDefend());
            setIntParameter(ps, index++, race.getRiskMalfunction());
            setIntParameter(ps, index++, race.getRiskOvertake());
            setParameter(ps, index++, race.getCarStart());
            setParameter(ps, index++, race.getCarFinish());
            setParameter(ps, index++, race.getCarWear());
            setParameter(ps, index++, race.getDriverStart());
            setParameter(ps, index++, race.getDriverFinish());
            setStringParameter(ps, index++, race.getTdStatus());
            setParameter(ps, index++, race.getTechDirector());
            setIntParameter(ps, index++, race.getStartingFuel());
            setIntParameter(ps, index++, race.getFinishFuel());
            setDoubleParameter(ps, index++, race.getFuelUsed());
            setDoubleParameter(ps, index++, race.getDistance());
            setDoubleParameter(ps, index++, race.getAvgTemp());
            setDoubleParameter(ps, index++, race.getAvgHum());
            setStringParameter(ps, index++, race.getTool());
            setStringParameter(ps, index++, race.getUrl());
            ps.executeUpdate();
            ResultSet generatedKeys = ps.getGeneratedKeys();
            if (generatedKeys.next()) {
                race.setId(generatedKeys.getInt(1));
            }

            for (NormalizedStint stint : race.getStints()) {
                stintDAO.create(race.getId(), stint, conn);
            }
            for (NormalizedLap lap : race.getLaps()) {
                lapDAO.create(lap, conn);
                rlDAO.create(race.getId(), lap.getId(), conn);
            }
        } finally {
            close(ps);
        }
    }

    /**
     * Retrieve a record from Database.
     * @param beanKey   The PK Object to be retrieved.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public NormalizedRace load(Integer raceId,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, raceId);
            rs = ps.executeQuery();
            List<NormalizedRace> results = getResults(rs, conn);
            return results.size() > 0 ? results.get(0) : null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Retrieve a record from Database.
     * @param beanKey   The PK Object to be retrieved.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public NormalizedRace loadByManager(String manager,
            Integer season,
            Integer race,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_BY_MANAGER);
            ps.setString(1, manager);
            ps.setInt(2, season);
            ps.setInt(3, race);
            rs = ps.executeQuery();
            List<NormalizedRace> results = getResults(rs, conn);
            return results.size() > 0 ? results.get(0) : null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    public List<NormalizedRace> loadRacesBySeasonRace(Integer season,
            Integer race,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_BY_SEASON_RACE);
            ps.setInt(1, season);
            ps.setInt(2, race);
            rs = ps.executeQuery();
            return getResults(rs, conn);
        } finally {
            close(rs);
            close(ps);
        }
    }

    public List<NormalizedRace> loadRaces(SearchParams p,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            boolean hasConstraints = false;
            StringBuilder where = new StringBuilder();
            hasConstraints = constrainMinRange(where, hasConstraints, "R.RISK_CLEAR", p.getMinRisk(), 0 );
            hasConstraints = constrainMaxRange(where, hasConstraints, "R.RISK_CLEAR", p.getMaxRisk(), 100 );
            hasConstraints = constrainMinRange(where, hasConstraints, "S.AVG_TEMP", p.getMinTemp(), 0 );
            hasConstraints = constrainMaxRange(where, hasConstraints, "S.AVG_TEMP", p.getMaxTemp(), 50 );
            hasConstraints = constrainMinRange(where, hasConstraints, "S.AVG_HUM", p.getMinHum(), 0 );
            hasConstraints = constrainMaxRange(where, hasConstraints, "S.AVG_HUM", p.getMaxHum(), 100 );

            hasConstraints = constrainMinRange(where, hasConstraints, "D.EXPERIENCE", p.getMinExp(), 0 );
            hasConstraints = constrainMaxRange(where, hasConstraints, "D.EXPERIENCE", p.getMaxExp(), 500 );
            hasConstraints = constrainMinRange(where, hasConstraints, "D.TECH_INSIGHT", p.getMinTI(), 0 );
            hasConstraints = constrainMaxRange(where, hasConstraints, "D.TECH_INSIGHT", p.getMaxTI(), 250 );
            hasConstraints = constrainMinRange(where, hasConstraints, "D.AGGRESSIVENESS", p.getMinAggr(), 0 );
            hasConstraints = constrainMaxRange(where, hasConstraints, "D.AGGRESSIVENESS", p.getMaxAggr(), 250 );
            
            hasConstraints = constrainMinRange(where, hasConstraints, "S.FINAL_LAP - S.INITIAL_LAP + 1", p.getMinLaps(), 1 );
            hasConstraints = constrainMaxRange(where, hasConstraints, "S.FINAL_LAP - S.INITIAL_LAP + 1", p.getMaxLaps(), 80 );
            hasConstraints = constrainMinRange(where, hasConstraints, "CP.LEVEL", p.getMinSusp(), 1 );
            hasConstraints = constrainMaxRange(where, hasConstraints, "CP.LEVEL", p.getMaxSusp(), 9 );
            hasConstraints = constrainMinRange(where, hasConstraints, "TS.DURABILITY", p.getMinDurab(), 1 );
            hasConstraints = constrainMaxRange(where, hasConstraints, "TS.DURABILITY", p.getMaxDurab(), 8 );
            
            hasConstraints = constrainLabel(where, hasConstraints, "S.TYRE", p.getTyre() );
            hasConstraints = constrainLabel(where, hasConstraints, "R.TYRE_SUPPLIER", p.getSupplier() );
            hasConstraints = constrainLabel(where, hasConstraints, "S.WEATHER_TYPE", p.getWeather() );
            
            hasConstraints = constrainIntLabel(where, hasConstraints, "R.TRACK_ID", p.getTrack() != null ? p.getTrack().getId() : null );
            hasConstraints = constrainLabel(where, hasConstraints, "T.FUEL_CONSUMPTION", p.getConsump() );
            hasConstraints = constrainLabel(where, hasConstraints, "T.TYRE_WEAR", p.getWear() );
            
            if( p.getLimit() != null ) {
                where.append( " LIMIT " ).append(p.getLimit());
            } 
            String sql = hasConstraints ? SQL_SELECT_BY_PARAMS + " WHERE " + where :  SQL_SELECT_BY_PARAMS + where;
            logger.info("Ad-hoc query = "+sql);
            ps = conn.prepareStatement( sql );
            rs = ps.executeQuery();
            return getResults(rs, conn);
        } finally {
            close(rs);
            close(ps);
        }
    }

    private boolean constrainMinRange(StringBuilder where, boolean hasConstraints, String constr, Integer val, int min) {
        if( val != null && val > min ) {
            if( hasConstraints ) {
                where.append(" AND ");
            }
            where.append( constr ).append( " >= " ).append(val);
            return true;
        }
        return hasConstraints;
    }

    private boolean constrainMaxRange(StringBuilder where, boolean hasConstraints, String constr, Integer val, int max) {
        if( val != null && val < max ) {
            if( hasConstraints ) {
                where.append(" AND ");
            }
            where.append( constr ).append( " <= " ).append(val);
            return true;
        }
        return hasConstraints;
    }

    private boolean constrainLabel(StringBuilder where, boolean hasConstraints, String constr, Object val) {
        if( val != null ) {
            if( hasConstraints ) {
                where.append(" AND ");
            }
            where.append( constr ).append( " = '" ).append(val.toString()).append("'");
            return true;
        }
        return hasConstraints;
    }

    private boolean constrainIntLabel(StringBuilder where, boolean hasConstraints, String constr, Integer val) {
        if( val != null ) {
            if( hasConstraints ) {
                where.append(" AND ");
            }
            where.append( constr ).append( " = " ).append(val);
            return true;
        }
        return hasConstraints;
    }

    /**
     * Update a record in Database.
     * @param race   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(NormalizedRace race,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            int result = 0;
            if (race.getId() == null) {
                NormalizedRace saved = loadByManager(race.getManager(), race.getSeasonNumber(), race.getRaceNumber(), conn);
                if (saved != null) {
                    race.setId(saved.getId());
                }
            }
            if (race.getId() != null) {
                List<PersistentEntity> toDelete = updateDependent(race, conn);

                ps = conn.prepareStatement(SQL_UPDATE);
                int index = 1;
                setIntParameter(ps, index++, race.getSeasonNumber());
                setIntParameter(ps, index++, race.getRaceNumber());
                setStringParameter(ps, index++, race.getManager());
                setStringParameter(ps, index++, race.getGroup());
                setParameter(ps, index++, race.getTrack());
                setStringParameter(ps, index++, race.getRaceStatus());
                setStringParameter(ps, index++, race.getSupplier());
                setParameter(ps, index++, race.getRaceSettings());
                setIntParameter(ps, index++, race.getRiskClear());
                setIntParameter(ps, index++, race.getRiskClearWet());
                setIntParameter(ps, index++, race.getRiskDefend());
                setIntParameter(ps, index++, race.getRiskMalfunction());
                setIntParameter(ps, index++, race.getRiskOvertake());
                setParameter(ps, index++, race.getCarStart());
                setParameter(ps, index++, race.getCarFinish());
                setParameter(ps, index++, race.getCarWear());
                setParameter(ps, index++, race.getDriverStart());
                setParameter(ps, index++, race.getDriverFinish());
                setStringParameter(ps, index++, race.getTdStatus());
                setParameter(ps, index++, race.getTechDirector());
                setIntParameter(ps, index++, race.getStartingFuel());
                setIntParameter(ps, index++, race.getFinishFuel());
                setDoubleParameter(ps, index++, race.getFuelUsed());
                setDoubleParameter(ps, index++, race.getDistance());
                setDoubleParameter(ps, index++, race.getAvgTemp());
                setDoubleParameter(ps, index++, race.getAvgHum());
                setStringParameter(ps, index++, race.getTool());
                setStringParameter(ps, index++, race.getUrl());
                setIntParameter(ps, index++, race.getId());
                result = ps.executeUpdate();

                deleteDependent(toDelete, conn);
            }
            return result;
        } finally {
            close(ps);
        }
    }

    @Override
    public void createOrUpdate(NormalizedRace race,
            Connection conn) throws SQLException {
        if (update(race, conn) == 0) {
            create(race, conn);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer raceId,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            NormalizedRace race = load(raceId, conn);
            for (NormalizedStint stint : race.getStints()) {
                stintDAO.delete(stint.getId(), conn);
            }
            for (NormalizedLap lap : race.getLaps()) {
                rlDAO.delete(race.getId(), lap.getId(), conn);
                lapDAO.delete(lap.getId(), conn);
            }

            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, raceId);
            ps.executeUpdate();

            deleteDependent(race, conn);
        } finally {
            close(ps);
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    @SuppressWarnings("unchecked")
    private List<NormalizedRace> getResults(ResultSet rs,
            Connection conn) throws SQLException {
        List<NormalizedRace> results = new ArrayList<NormalizedRace>();
        while (rs.next()) {
            NormalizedRace race = new NormalizedRace();
            race.setId(rs.getInt("ID"));
            race.setSeasonNumber(getIntOrNull(rs, "SEASON_NUMBER"));
            race.setRaceNumber(getIntOrNull(rs, "RACE_NUMBER"));
            race.setManager(rs.getString("MANAGER_NAME"));
            race.setGroup(rs.getString("GROUP_NAME"));
            race.setTrack(trackDAO.load(rs.getInt("TRACK_ID"), conn));
            String status = rs.getString("RACE_STATUS");
            race.setRaceStatus(status != null ? RaceStatus.valueOf(status) : RaceStatus.UNKNOWN);
            String supplier = rs.getString("TYRE_SUPPLIER");
            race.setSupplier(supplier != null ? TyreSupplier.determineTyre(supplier) : null);
            race.setRaceSettings(settingsDAO.load(rs.getInt("RACE_SETTINGS_ID"), conn));
            race.setRiskClear(getIntOrNull(rs, "RISK_CLEAR"));
            race.setRiskClearWet(getIntOrNull(rs, "RISK_CLEAR_WET"));
            race.setRiskDefend(getIntOrNull(rs, "RISK_DEFEND"));
            race.setRiskMalfunction(getIntOrNull(rs, "RISK_MALFUNCTION"));
            race.setRiskOvertake(getIntOrNull(rs, "RISK_OVERTAKE"));
            race.setCarStart(carDAO.load(rs.getInt("CAR_START_ID"), conn));
            race.setCarFinish(carDAO.load(rs.getInt("CAR_FINISH_ID"), conn));
            race.setCarWear(carDAO.load(rs.getInt("CAR_WEAR_ID"), conn));
            race.setDriverStart(driverDAO.load(rs.getInt("DRIVER_START_ID"), conn));
            race.setDriverFinish(driverDAO.load(rs.getInt("DRIVER_FINISH_ID"), conn));
            status = rs.getString("TD_STATUS");
            race.setTdStatus(status != null ? TDStatus.valueOf(status) : TDStatus.UNKNOWN);
            race.setTechDirector(tdDAO.load(rs.getInt("TD_ID"), conn));
            race.setStartingFuel(getIntOrNull(rs, "FUEL_START"));
            race.setFinishFuel(getIntOrNull(rs, "FUEL_FINISH"));
            race.setFuelUsed(getDoubleOrNull(rs, "FUEL_USED"));
            race.setDistance(getDoubleOrNull(rs, "DISTANCE"));
            race.setAvgTemp(getDoubleOrNull(rs, "AVG_TEMP"));
            race.setAvgHum(getDoubleOrNull(rs, "AVG_HUM"));
            race.setTool(rs.getString("TOOL"));
            race.setUrl(rs.getString("URL"));

            List<NormalizedLap> laps = rlDAO.loadLapsForRace(race.getId(), conn);
            race.getLaps().addAll(laps != null ? laps : Collections.EMPTY_LIST);

            List<NormalizedStint> stints = stintDAO.loadStintsForRace(race.getId(), conn);
            race.getStints().addAll(stints != null ? stints : Collections.EMPTY_LIST);
            results.add(race);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }

    private void createDependent(NormalizedRace race,
            Connection conn) throws SQLException {
        if (race.getRaceSettings() != null) {
            settingsDAO.create(race.getRaceSettings(), conn);
        }
        if (race.getCarStart() != null) {
            carDAO.create(race.getCarStart(), conn);
        }
        if (race.getCarFinish() != null) {
            carDAO.create(race.getCarFinish(), conn);
        }
        if (race.getCarWear() != null) {
            carDAO.create(race.getCarWear(), conn);
        }
        if (race.getDriverStart() != null) {
            driverDAO.create(race.getDriverStart(), conn);
        }
        if (race.getDriverFinish() != null) {
            driverDAO.create(race.getDriverFinish(), conn);
        }
        if (race.getTechDirector() != null) {
            tdDAO.create(race.getTechDirector(), conn);
        }
    }

    private void deleteDependent(List<PersistentEntity> toDelete,
            Connection conn) throws SQLException {
        for (PersistentEntity pe : toDelete) {
            if (pe instanceof CarSettings) {
                settingsDAO.delete(pe.getId(), conn);
            } else if (pe instanceof Car) {
                carDAO.delete(pe.getId(), conn);
            } else if (pe instanceof Driver) {
                driverDAO.delete(pe.getId(), conn);
            } else if (pe instanceof TechDirector) {
                tdDAO.delete(pe.getId(), conn);
            } else {
                throw new SQLException("Unknown entity type for deletion: " + pe.getClass().getName());
            }
        }
    }

    private List<PersistentEntity> updateDependent(NormalizedRace race,
            Connection conn) throws SQLException {
        NormalizedRace saved = load(race.getId(), conn);
        List<PersistentEntity> toDelete = new ArrayList<PersistentEntity>();

        if (saved != null) {
            if (saved.getRaceSettings() == null && race.getRaceSettings() != null) {
                settingsDAO.create(race.getRaceSettings(), conn);
            } else if (saved.getRaceSettings() != null && race.getRaceSettings() == null) {
                toDelete.add(saved.getRaceSettings());
            } else if (saved.getRaceSettings() != null && race.getRaceSettings() != null) {
                if (saved.getRaceSettings().getId() == race.getRaceSettings().getId()) {
                    settingsDAO.update(race.getRaceSettings(), conn);
                } else {
                    toDelete.add(saved.getRaceSettings());
                    settingsDAO.create(race.getRaceSettings(), conn);
                }
            }

            if (saved.getCarStart() == null && race.getCarStart() != null) {
                carDAO.create(race.getCarStart(), conn);
            } else if (saved.getCarStart() != null && race.getCarStart() == null) {
                toDelete.add(saved.getCarStart());
            } else if (saved.getCarStart() != null && race.getCarStart() != null) {
                if (saved.getCarStart().getId() == race.getCarStart().getId()) {
                    carDAO.update(race.getCarStart(), conn);
                } else {
                    carDAO.create(race.getCarStart(), conn);
                }
            }

            if (saved.getCarFinish() == null && race.getCarFinish() != null) {
                carDAO.create(race.getCarFinish(), conn);
            } else if (saved.getCarFinish() != null && race.getCarFinish() == null) {
                toDelete.add(saved.getCarFinish());
            } else if (saved.getCarFinish() != null && race.getCarFinish() != null) {
                if (saved.getCarFinish().getId() == race.getCarFinish().getId()) {
                    carDAO.update(race.getCarFinish(), conn);
                } else {
                    carDAO.create(race.getCarFinish(), conn);
                }
            }

            if (saved.getCarWear() == null && race.getCarWear() != null) {
                carDAO.create(race.getCarWear(), conn);
            } else if (saved.getCarWear() != null && race.getCarWear() == null) {
                toDelete.add(saved.getCarWear());
            } else if (saved.getCarWear() != null && race.getCarWear() != null) {
                if (saved.getCarWear().getId() == race.getCarWear().getId()) {
                    carDAO.update(race.getCarWear(), conn);
                } else {
                    carDAO.create(race.getCarWear(), conn);
                }
            }

            if (saved.getDriverStart() == null && race.getDriverStart() != null) {
                driverDAO.create(race.getDriverStart(), conn);
            } else if (saved.getDriverStart() != null && race.getDriverStart() == null) {
                toDelete.add(saved.getDriverStart());
            } else if (saved.getDriverStart() != null && race.getDriverStart() != null) {
                if (saved.getDriverStart().getId() == race.getDriverStart().getId()) {
                    driverDAO.update(race.getDriverStart(), conn);
                } else {
                    driverDAO.create(race.getDriverStart(), conn);
                }
            }

            if (saved.getDriverFinish() == null && race.getDriverFinish() != null) {
                driverDAO.create(race.getDriverFinish(), conn);
            } else if (saved.getDriverFinish() != null && race.getDriverFinish() == null) {
                toDelete.add(saved.getDriverFinish());
            } else if (saved.getDriverFinish() != null && race.getDriverFinish() != null) {
                if (saved.getDriverFinish().getId() == race.getDriverFinish().getId()) {
                    driverDAO.update(race.getDriverFinish(), conn);
                } else {
                    driverDAO.create(race.getDriverFinish(), conn);
                }
            }

            if (saved.getTechDirector() == null && race.getTechDirector() != null) {
                tdDAO.create(race.getTechDirector(), conn);
            } else if (saved.getTechDirector() != null && race.getTechDirector() == null) {
                toDelete.add(saved.getTechDirector());
            } else if (saved.getTechDirector() != null && race.getTechDirector() != null) {
                if (saved.getTechDirector().getId() == race.getTechDirector().getId()) {
                    tdDAO.update(race.getTechDirector(), conn);
                } else {
                    tdDAO.create(race.getTechDirector(), conn);
                }
            }

            List<NormalizedLap> laps = saved.getLaps();
            for (int i = 0; i < race.getLaps().size(); i++) {
                NormalizedLap newLap = race.getLaps().get(i);
                if (i < laps.size()) {
                    NormalizedLap savedLap = laps.get(i);
                    if (!savedLap.equals(newLap)) {
                        newLap.setId(savedLap.getId());
                        lapDAO.update(newLap, conn);
                    }
                } else {
                    lapDAO.create(newLap, conn);
                    rlDAO.create(race.getId(), newLap.getId(), conn);
                }
            }
            for (int i = race.getLaps().size(); i < laps.size(); i++) {
                NormalizedLap lap = laps.get(i);
                rlDAO.delete(race.getId(), lap.getId(), conn);
                lapDAO.delete(lap.getId(), conn);
            }

            List<NormalizedStint> stints = saved.getStints();
            for (int i = 0; i < race.getStints().size(); i++) {
                NormalizedStint newStint = race.getStints().get(i);
                if (i < stints.size()) {
                    NormalizedStint savedPit = stints.get(i);
                    if (!savedPit.equals(newStint)) {
                        newStint.setId(savedPit.getId());
                        stintDAO.update(saved.getId(), newStint, conn);
                    }
                } else {
                    stintDAO.create(saved.getId(), newStint, conn);
                }
            }
            for (int i = race.getStints().size(); i < stints.size(); i++) {
                NormalizedStint stint = stints.get(i);
                stintDAO.delete(stint.getId(), conn);
            }
        }
        return toDelete;

    }

    private void deleteDependent(NormalizedRace race,
            Connection conn) throws SQLException {
        if (race.getRaceSettings() != null) {
            settingsDAO.delete(race.getRaceSettings().getId(), conn);
        }
        if (race.getCarStart() != null) {
            carDAO.delete(race.getCarStart().getId(), conn);
        }
        if (race.getCarFinish() != null) {
            carDAO.delete(race.getCarFinish().getId(), conn);
        }
        if (race.getCarWear() != null) {
            carDAO.delete(race.getCarFinish().getId(), conn);
        }
        if (race.getDriverStart() != null) {
            driverDAO.delete(race.getDriverStart().getId(), conn);
        }
        if (race.getDriverFinish() != null) {
            driverDAO.delete(race.getDriverFinish().getId(), conn);
        }
        if (race.getTechDirector() != null) {
            tdDAO.delete(race.getTechDirector().getId(), conn);
        }
    }
}