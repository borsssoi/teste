/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:51 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import static org.gproman.db.DBUtil.getIntOrNull;
import static org.gproman.db.DBUtil.setIntParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.model.dao.FacilitiesDAO;
import org.gproman.model.staff.Facilities;

/**
 * This class provides methods to populate DB Table of TRACK
 */
public class FacilitiesDAOImpl implements FacilitiesDAO {

    public static final FacilitiesDAO INSTANCE   = new FacilitiesDAOImpl();

    /* SQL to insert data */
    private static final String       SQL_INSERT =
                                                         "INSERT INTO FACILITIES ("
                                                                 + "OVERALL, EXPERIENCE, MOTIVATION, TECHNICAL, "
                                                                 + "STRESS, CONCENTRATION, EFFICIENCY, WINDTUNNEL, "
                                                                 + "PITSTOP, WORKSHOP, DESIGN, ENGINEERING, "
                                                                 + "ALLOY, COMMERCIAL, MLT, SALARY, MAINTENANCE "
                                                                 + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

    /* SQL to select data */
    private static final String       SQL_SELECT =
                                                         "SELECT "
                                                                 + "ID, OVERALL, EXPERIENCE, MOTIVATION, TECHNICAL, "
                                                                 + "STRESS, CONCENTRATION, EFFICIENCY, WINDTUNNEL, "
                                                                 + "PITSTOP, WORKSHOP, DESIGN, ENGINEERING, "
                                                                 + "ALLOY, COMMERCIAL, MLT, SALARY, MAINTENANCE "
                                                                 + "FROM FACILITIES WHERE "
                                                                 + "ID = ?";

    /* SQL to update data */
    private static final String       SQL_UPDATE =
                                                         "UPDATE FACILITIES SET "
                                                                 + "OVERALL = ?, EXPERIENCE = ?, MOTIVATION = ?, TECHNICAL = ?, "
                                                                 + "STRESS = ?, CONCENTRATION = ?, EFFICIENCY = ?, WINDTUNNEL = ?, "
                                                                 + "PITSTOP = ?, WORKSHOP = ?, DESIGN = ?, ENGINEERING = ?, "
                                                                 + "ALLOY = ?, COMMERCIAL = ?, MLT = ?, SALARY = ?, MAINTENANCE = ? "
                                                                 + "WHERE "
                                                                 + "ID = ?";

    /* SQL to delete data */
    private static final String       SQL_DELETE =
                                                         "DELETE FROM FACILITIES WHERE "
                                                                 + "ID = ?";

    private FacilitiesDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Facilities bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            int index = 1;
            setIntParameter(ps, index++, bean.getOverall());
            setIntParameter(ps, index++, bean.getExperience());
            setIntParameter(ps, index++, bean.getMotivation());
            setIntParameter(ps, index++, bean.getTechnical());
            setIntParameter(ps, index++, bean.getStress());
            setIntParameter(ps, index++, bean.getConcentration());
            setIntParameter(ps, index++, bean.getEfficiency());
            setIntParameter(ps, index++, bean.getWindtunnel());
            setIntParameter(ps, index++, bean.getPitstop());
            setIntParameter(ps, index++, bean.getWorkshop());
            setIntParameter(ps, index++, bean.getDesign());
            setIntParameter(ps, index++, bean.getEngineering());
            setIntParameter(ps, index++, bean.getAlloy());
            setIntParameter(ps, index++, bean.getCommercial());
            setIntParameter(ps, index++, bean.getMlt());
            setIntParameter(ps, index++, bean.getSalary());
            setIntParameter(ps, index++, bean.getMaintenance());
            ps.executeUpdate();

            ResultSet generatedKeys = ps.getGeneratedKeys();
            if (generatedKeys.next()) {
                bean.setId(generatedKeys.getInt(1));
            }

        } finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Facilities load(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<Facilities> results = getResults(rs);
            if (results.size() > 0) {
                return results.get(0);
            } else {
                return null;
            }
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(Facilities bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            if (bean.getId() == null) {
                return 0;
            }

            ps = conn.prepareStatement(SQL_UPDATE);
            int index = 1;
            setIntParameter(ps, index++, bean.getOverall());
            setIntParameter(ps, index++, bean.getExperience());
            setIntParameter(ps, index++, bean.getMotivation());
            setIntParameter(ps, index++, bean.getTechnical());
            setIntParameter(ps, index++, bean.getStress());
            setIntParameter(ps, index++, bean.getConcentration());
            setIntParameter(ps, index++, bean.getEfficiency());
            setIntParameter(ps, index++, bean.getWindtunnel());
            setIntParameter(ps, index++, bean.getPitstop());
            setIntParameter(ps, index++, bean.getWorkshop());
            setIntParameter(ps, index++, bean.getDesign());
            setIntParameter(ps, index++, bean.getEngineering());
            setIntParameter(ps, index++, bean.getAlloy());
            setIntParameter(ps, index++, bean.getCommercial());
            setIntParameter(ps, index++, bean.getMlt());
            setIntParameter(ps, index++, bean.getSalary());
            setIntParameter(ps, index++, bean.getMaintenance());
            setIntParameter(ps, index++, bean.getId());
            return ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    @Override
    public void createOrUpdate(Facilities bean, Connection conn) throws SQLException {
        if (update(bean, conn) == 0) {
            create(bean, conn);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<Facilities> getResults(ResultSet rs) throws SQLException {
        List<Facilities> results = new ArrayList<Facilities>();
        while (rs.next()) {
            Facilities bean = new Facilities();
            bean.setId(rs.getInt("ID"));
            bean.setOverall(getIntOrNull(rs, "OVERALL"));
            bean.setExperience(getIntOrNull(rs, "EXPERIENCE"));
            bean.setMotivation(getIntOrNull(rs, "MOTIVATION"));
            bean.setTechnical(getIntOrNull(rs, "TECHNICAL"));
            bean.setStress(getIntOrNull(rs, "STRESS"));
            bean.setConcentration(getIntOrNull(rs, "CONCENTRATION"));
            bean.setEfficiency(getIntOrNull(rs, "EFFICIENCY"));
            bean.setWindtunnel(getIntOrNull(rs, "WINDTUNNEL"));
            bean.setPitstop(getIntOrNull(rs, "PITSTOP"));
            bean.setWorkshop(getIntOrNull(rs, "WORKSHOP"));
            bean.setDesign(getIntOrNull(rs, "DESIGN"));
            bean.setEngineering(getIntOrNull(rs, "ENGINEERING"));
            bean.setAlloy(getIntOrNull(rs, "ALLOY"));
            bean.setCommercial(getIntOrNull(rs, "COMMERCIAL"));
            bean.setMlt(getIntOrNull(rs, "MLT"));
            bean.setSalary(getIntOrNull(rs, "SALARY"));
            bean.setMaintenance(getIntOrNull(rs, "MAINTENANCE"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }
}