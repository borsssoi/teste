/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.everest.orm;

import static org.gproman.db.DBUtil.getIntOrNull;
import static org.gproman.db.DBUtil.setIntParameter;
import static org.gproman.db.DBUtil.setStringParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.everest.dao.EverestTechDirectorDAO;
import org.gproman.model.staff.TechDirector;

/**
 * This class provides methods to populate DB Table of DRIVER
 */
public class EverestTechDirectorDAOImpl
        implements
        EverestTechDirectorDAO {

    public static final EverestTechDirectorDAO INSTANCE   = new EverestTechDirectorDAOImpl();

    /* SQL to insert data */
    private static final String                SQL_INSERT =
                                                                  "INSERT INTO TECH_DIRECTOR ("
                                                                          + "NUMBER, NAME, OVERALL, LEADERSHIP, "
                                                                          + "RD_MECH, RD_ELECT, RD_AERO, EXPERIENCE, PIT_COORD, MOTIVATION, AGE "
                                                                          + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String                SQL_SELECT =
                                                                  "SELECT "
                                                                          + "ID, NUMBER, NAME, OVERALL, LEADERSHIP, "
                                                                          + "RD_MECH, RD_ELECT, RD_AERO, EXPERIENCE, PIT_COORD, MOTIVATION, AGE "
                                                                          + "FROM TECH_DIRECTOR WHERE "
                                                                          + "ID = ?";

    /* SQL to update data */
    private static final String                SQL_UPDATE =
                                                                  "UPDATE TECH_DIRECTOR SET "
                                                                          + "NUMBER = ?, NAME = ?, OVERALL = ?, LEADERSHIP = ?, "
                                                                          + "RD_MECH = ?, RD_ELECT = ?, RD_AERO = ?, EXPERIENCE = ?, PIT_COORD = ?, "
                                                                          + "MOTIVATION = ?, AGE = ? "
                                                                          + "WHERE "
                                                                          + "ID = ?";

    /* SQL to delete data */
    private static final String                SQL_DELETE =
                                                                  "DELETE FROM TECH_DIRECTOR WHERE ID = ?";

    private EverestTechDirectorDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param td   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(TechDirector td,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            int index = 1;
            ps = conn.prepareStatement(SQL_INSERT);
            setIntParameter(ps, index++, td.getNumber());
            setStringParameter(ps, index++, td.getName());
            setIntParameter(ps, index++, td.getAttributes().getOverall());
            setIntParameter(ps, index++, td.getAttributes().getLeadership());
            setIntParameter(ps, index++, td.getAttributes().getRdMech());
            setIntParameter(ps, index++, td.getAttributes().getRdElect());
            setIntParameter(ps, index++, td.getAttributes().getRdAero());
            setIntParameter(ps, index++, td.getAttributes().getExperience());
            setIntParameter(ps, index++, td.getAttributes().getPitCoord());
            setIntParameter(ps, index++, td.getAttributes().getMotivation());
            setIntParameter(ps, index++, td.getAttributes().getAge());
            ps.executeUpdate();

            ResultSet generatedKeys = ps.getGeneratedKeys();
            if (generatedKeys.next()) {
                td.setId(generatedKeys.getInt(1));
            }
        } finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public TechDirector load(Integer key,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<TechDirector> results = getResults(rs, conn);
            if (results.size() > 0)
                return results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(TechDirector td,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            TechDirector saved = load(td.getId(), conn);
            int result = 0;
            if (saved != null) {
                ps = conn.prepareStatement(SQL_UPDATE);
                int index = 1;
                setIntParameter(ps, index++, td.getNumber());
                setStringParameter(ps, index++, td.getName());
                setIntParameter(ps, index++, td.getAttributes().getOverall());
                setIntParameter(ps, index++, td.getAttributes().getLeadership());
                setIntParameter(ps, index++, td.getAttributes().getRdMech());
                setIntParameter(ps, index++, td.getAttributes().getRdElect());
                setIntParameter(ps, index++, td.getAttributes().getRdAero());
                setIntParameter(ps, index++, td.getAttributes().getExperience());
                setIntParameter(ps, index++, td.getAttributes().getPitCoord());
                setIntParameter(ps, index++, td.getAttributes().getMotivation());
                setIntParameter(ps, index++, td.getAttributes().getAge());
                setIntParameter(ps, index++, td.getId());
                result = ps.executeUpdate();
            }
            return result;
        } finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<TechDirector> getResults(ResultSet rs,
            Connection conn) throws SQLException {
        List<TechDirector> results = new ArrayList<TechDirector>();
        while (rs.next()) {
            TechDirector td = new TechDirector();
            td.setId(rs.getInt("ID"));
            td.setNumber(rs.getInt("NUMBER"));
            td.setName(rs.getString("NAME"));
            td.getAttributes().setOverall(getIntOrNull(rs, "OVERALL"));
            td.getAttributes().setLeadership(getIntOrNull(rs, "LEADERSHIP"));
            td.getAttributes().setRdMech(getIntOrNull(rs, "RD_MECH"));
            td.getAttributes().setRdElect(getIntOrNull(rs, "RD_ELECT"));
            td.getAttributes().setRdAero(getIntOrNull(rs, "RD_AERO"));
            td.getAttributes().setExperience(getIntOrNull(rs, "EXPERIENCE"));
            td.getAttributes().setPitCoord(getIntOrNull(rs, "PIT_COORD"));
            td.getAttributes().setMotivation(getIntOrNull(rs, "MOTIVATION"));
            td.getAttributes().setAge(getIntOrNull(rs, "AGE"));
            results.add(td);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }
}