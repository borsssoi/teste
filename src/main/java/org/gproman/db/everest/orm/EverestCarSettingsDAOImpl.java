/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.everest.orm;

import static org.gproman.db.DBUtil.getIntOrNull;
import static org.gproman.db.DBUtil.setIntParameter;
import static org.gproman.db.DBUtil.setStringParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.everest.dao.EverestCarSettingsDAO;
import org.gproman.model.race.CarSettings;
import org.gproman.model.race.Tyre;

/**
 * This class provides methods to populate DB Table of CAR_SETTINGS
 */
public class EverestCarSettingsDAOImpl
        implements
        EverestCarSettingsDAO {

    public static final EverestCarSettingsDAO INSTANCE           = new EverestCarSettingsDAOImpl();

    /* SQL to insert data */
    private static final String               SQL_INSERT         =
                                                                         "INSERT INTO CAR_SETTINGS ("
                                                                                 + "BRAKES, ENGINE, FRONT_WING, GEAR, REAR_WING, SUSPENSION, "
                                                                                 + "TYRE"
                                                                                 + ") VALUES (?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String               SQL_SELECT         =
                                                                         "SELECT "
                                                                                 + "ID, BRAKES, ENGINE, FRONT_WING, GEAR, REAR_WING, SUSPENSION, "
                                                                                 + "TYRE "
                                                                                 + "FROM CAR_SETTINGS WHERE "
                                                                                 + "ID = ?";

    /* SQL to update data */
    private static final String               SQL_UPDATE         =
                                                                         "UPDATE CAR_SETTINGS SET "
                                                                                 + "BRAKES = ?, ENGINE = ?, FRONT_WING = ?, GEAR = ?, REAR_WING = ?, SUSPENSION = ?, TYRE = ? "
                                                                                 + "WHERE "
                                                                                 + "ID = ?";

    /* SQL to delete data */
    private static final String               SQL_DELETE         =
                                                                         "DELETE FROM CAR_SETTINGS WHERE "
                                                                                 + "ID = ?";

    private EverestCarSettingsDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(CarSettings bean,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            int index = 1;
            setIntParameter(ps, index++, bean.getBrakes());
            setIntParameter(ps, index++, bean.getEngine());
            setIntParameter(ps, index++, bean.getFrontWing());
            setIntParameter(ps, index++, bean.getGear());
            setIntParameter(ps, index++, bean.getRearWing());
            setIntParameter(ps, index++, bean.getSuspension());
            setStringParameter(ps, index++, bean.getTyre());
            ps.executeUpdate();
            
            ResultSet generatedKeys = ps.getGeneratedKeys();
            if (generatedKeys.next()) {
                bean.setId(generatedKeys.getInt(1));
            }
        } finally {
            close(ps);
        }
    }

    /**
     * Retrieve a record from Database.
     * @param beanKey   The PK Object to be retrieved.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public CarSettings load(Integer key,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<CarSettings> results = getResults(rs);
            if (results.size() > 0)
                return results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(CarSettings bean,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            if (bean.getId() != null) {
                ps = conn.prepareStatement(SQL_UPDATE);
                int index = 1;
                setIntParameter(ps, index++, bean.getBrakes());
                setIntParameter(ps, index++, bean.getEngine());
                setIntParameter(ps, index++, bean.getFrontWing());
                setIntParameter(ps, index++, bean.getGear());
                setIntParameter(ps, index++, bean.getRearWing());
                setIntParameter(ps, index++, bean.getSuspension());
                setStringParameter(ps, index++, bean.getTyre());
                ps.setInt(index++, bean.getId());
                return ps.executeUpdate();
            } else {
                return 0;
            }
        } finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key,
            Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    @Override
    public void createOrUpdate(CarSettings settings,
            Connection conn) throws SQLException {
        if (update(settings, conn) == 0) {
            create(settings, conn);
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<CarSettings> getResults(ResultSet rs) throws SQLException {
        List<CarSettings> results = new ArrayList<CarSettings>();
        while (rs.next()) {
            CarSettings bean = new CarSettings();
            bean.setId(getIntOrNull(rs, "ID"));
            bean.setBrakes(getIntOrNull(rs, "BRAKES"));
            bean.setEngine(getIntOrNull(rs, "ENGINE"));
            bean.setFrontWing(getIntOrNull(rs, "FRONT_WING"));
            bean.setGear(getIntOrNull(rs, "GEAR"));
            bean.setRearWing(getIntOrNull(rs, "REAR_WING"));
            bean.setSuspension(getIntOrNull(rs, "SUSPENSION"));
            String tyre = rs.getString("TYRE");
            bean.setTyre(tyre != null ? Tyre.valueOf(tyre) : null);
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }
}