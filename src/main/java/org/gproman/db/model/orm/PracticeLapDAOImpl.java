/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.model.dao.LapDAO;
import org.gproman.db.model.dao.PracticeLapDAO;
import org.gproman.model.race.Lap;

/**
 * This class provides methods to populate DB Table of PRACTICE_LAP
 */
public class PracticeLapDAOImpl implements PracticeLapDAO {
    
    public static final PracticeLapDAO INSTANCE = new PracticeLapDAOImpl();
    
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO PRACTICE_LAP ("
        + "PRACTICE_ID, LAP_ID"
        + ") VALUES (?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "PRACTICE_ID, LAP_ID "
        + "FROM PRACTICE_LAP WHERE "
        + "PRACTICE_ID = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM PRACTICE_LAP WHERE "
        + "PRACTICE_ID = ? AND LAP_ID = ?";
    
    private static final String SQL_DELETE_LAPS_FOR_PRACTICE_2 =
            "DELETE FROM PRACTICE_LAP WHERE "
            + "PRACTICE_ID = ?";
    
    private LapDAO lapDAO = LapDAOImpl.INSTANCE;
    
    private PracticeLapDAOImpl() {}

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Integer practiceId, Integer lapId, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, practiceId);
            ps.setInt(2, lapId);
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public List<Lap> loadLapsForPractice(Integer practiceId, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, practiceId);
            rs = ps.executeQuery();
            List<Lap> results = getResults(rs, conn);
            return results;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer practiceId, Integer lapId, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, practiceId);
            ps.setInt(2, lapId);
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    @Override
    public void deleteLapsForPractice(Integer practiceId,
                                      Connection conn) throws SQLException {
        PreparedStatement ps1 = null;
        PreparedStatement ps2 = null;
        try {
            List<Lap> lapsForPractice = loadLapsForPractice( practiceId, conn );
            
            ps2 = conn.prepareStatement(SQL_DELETE_LAPS_FOR_PRACTICE_2);
            ps2.setInt(1, practiceId);
            ps2.executeUpdate();
            
            for( Lap lap : lapsForPractice ) {
                lapDAO.delete( lap.getId(), conn );
            }
        }finally {
            close(ps1);
            close(ps2);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<Lap> getResults(ResultSet rs, Connection conn) throws SQLException {
        List<Lap> results = new ArrayList<Lap>();
        while (rs.next()) {
            Integer lapId = rs.getInt("LAP_ID");
            Lap lap = lapDAO.load( lapId, conn );
            results.add(lap);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}