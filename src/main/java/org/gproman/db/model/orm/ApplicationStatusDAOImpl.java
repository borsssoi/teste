/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.model.orm;

import static org.gproman.db.DBUtil.setIntParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.model.dao.ApplicationStatusDAO;
import org.gproman.model.ApplicationStatus;

/**
 * This class provides methods to populate DB Table of APPLICATION_STATUS
 */
public class ApplicationStatusDAOImpl implements ApplicationStatusDAO {
    public static final ApplicationStatusDAO INSTANCE = new ApplicationStatusDAOImpl();
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "ID, SCHEMA_VERSION, CURRENT_SEASON, NEXT_RACE, LAST_DOWNLOAD "
        + "FROM APPLICATION_STATUS WHERE "
        + "ID = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE APPLICATION_STATUS SET "
        + "CURRENT_SEASON = ?, NEXT_RACE = ?, LAST_DOWNLOAD = ? "
        + "WHERE "
        + "ID = ?";

    private ApplicationStatusDAOImpl() {}
    
    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public ApplicationStatus load(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key );
            rs = ps.executeQuery();
            List<ApplicationStatus> results = getResults(rs);
            if (results.size() > 0)
                return results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(ApplicationStatus bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            setIntParameter( ps, 1, bean.getCurrentSeason());
            setIntParameter( ps, 2, bean.getNextRace());
            ps.setTimestamp(3, bean.getLastDownload());
            ps.setInt(4, bean.getId());
            return ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<ApplicationStatus> getResults(ResultSet rs) throws SQLException {
        List<ApplicationStatus> results = new ArrayList<ApplicationStatus>();
        while (rs.next()) {
            ApplicationStatus bean = new ApplicationStatus();
            bean.setId(rs.getInt("ID"));
            bean.setSchemaVersion(rs.getInt("SCHEMA_VERSION"));
            int season = rs.getInt("CURRENT_SEASON");
            bean.setCurrentSeason( rs.wasNull() ? null : season);
            int nextRace = rs.getInt("NEXT_RACE");
            bean.setNextRace( rs.wasNull() ? null : nextRace );
            bean.setLastDownload(rs.getTimestamp("LAST_DOWNLOAD"));
            if (rs.wasNull())
                bean.setLastDownload(null);     
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}