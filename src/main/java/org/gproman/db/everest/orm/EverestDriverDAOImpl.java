/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.everest.orm;

import static org.gproman.db.DBUtil.getIntOrNull;
import static org.gproman.db.DBUtil.setIntParameter;
import static org.gproman.db.DBUtil.setStringParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.everest.dao.EverestDriverDAO;
import org.gproman.db.everest.dao.EverestFavoriteTrackDAO;
import org.gproman.model.driver.Driver;
import org.gproman.model.track.Track;

/**
 * This class provides methods to populate DB Table of DRIVER
 */
public class EverestDriverDAOImpl
        implements
        EverestDriverDAO {

    public static final EverestDriverDAO INSTANCE   = new EverestDriverDAOImpl();

    /* SQL to insert data */
    private static final String   SQL_INSERT =
                                                     "INSERT INTO DRIVER ("
                                                             + "NUMBER, AGE, AGGRESSIVENESS, CHARISMA, CONCENTRATION, EXPERIENCE, MOTIVATION, "
                                                             + "OVERALL, REPUTATION, STAMINA, TALENT, TECH_INSIGHT, WEIGHT, NAME "
                                                             + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String   SQL_SELECT =
                                                     "SELECT "
                                                             + "ID, NUMBER, AGE, AGGRESSIVENESS, CHARISMA, CONCENTRATION, EXPERIENCE, MOTIVATION, "
                                                             + "OVERALL, REPUTATION, STAMINA, TALENT, TECH_INSIGHT, WEIGHT, NAME "
                                                             + "FROM DRIVER WHERE "
                                                             + "ID = ?";

    /* SQL to update data */
    private static final String   SQL_UPDATE =
                                                     "UPDATE DRIVER SET "
                                                             + "NUMBER = ?, AGE = ?, AGGRESSIVENESS = ?, CHARISMA = ?, CONCENTRATION = ?, "
                                                             + "EXPERIENCE = ?, MOTIVATION = ?, OVERALL = ?,  REPUTATION = ?, STAMINA = ?, "
                                                             + "TALENT = ?, TECH_INSIGHT = ?, WEIGHT = ?, NAME = ? "
                                                             + "WHERE "
                                                             + "ID = ?";

    /* SQL to delete data */
    private static final String   SQL_DELETE =
                                                     "DELETE FROM DRIVER WHERE ID = ?";

    private EverestFavoriteTrackDAO      ftDAO      = EverestFavoriteTrackDAOImpl.INSTANCE;

    private EverestDriverDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param driver   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Driver driver,
                       Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            int index = 1;
            ps = conn.prepareStatement( SQL_INSERT );
            setIntParameter(ps, index++, driver.getNumber() );
            setIntParameter(ps, index++, driver.getAttributes().getAge() );
            setIntParameter(ps, index++, driver.getAttributes().getAggressiveness() );
            setIntParameter(ps, index++, driver.getAttributes().getCharisma() );
            setIntParameter(ps, index++, driver.getAttributes().getConcentration() );
            setIntParameter(ps, index++, driver.getAttributes().getExperience() );
            setIntParameter(ps, index++, driver.getAttributes().getMotivation() );
            setIntParameter(ps, index++, driver.getAttributes().getOverall() );
            setIntParameter(ps, index++, driver.getAttributes().getReputation() );
            setIntParameter(ps, index++, driver.getAttributes().getStamina() );
            setIntParameter(ps, index++, driver.getAttributes().getTalent() );
            setIntParameter(ps, index++, driver.getAttributes().getTechInsight() );
            setIntParameter(ps, index++, driver.getAttributes().getWeight() );
            setStringParameter(ps, index++, driver.getName() );
            ps.executeUpdate();

            ResultSet generatedKeys = ps.getGeneratedKeys();
            if (generatedKeys.next()) {
                driver.setId(generatedKeys.getInt(1));
            }

            for ( Track track : driver.getFavoriteTracks() ) {
                ftDAO.create( driver.getId(), track.getId(), conn );
            }
        } finally {
            close( ps );
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Driver load(Integer key,
                       Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement( SQL_SELECT );
            ps.setInt( 1, key );
            rs = ps.executeQuery();
            List<Driver> results = getResults( rs, conn );
            if ( results.size() > 0 ) return (Driver) results.get( 0 );
            else return null;
        } finally {
            close( rs );
            close( ps );
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public int update(Driver bean,
                      Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            Driver saved = load( bean.getId(), conn );
            int result = 0;
            if ( saved != null ) {

                ps = conn.prepareStatement( SQL_UPDATE );
                int index = 1;
                setIntParameter(ps, index++, bean.getNumber() );
                setIntParameter(ps, index++, bean.getAttributes().getAge() );
                setIntParameter(ps, index++, bean.getAttributes().getAggressiveness() );
                setIntParameter(ps, index++, bean.getAttributes().getCharisma() );
                setIntParameter(ps, index++, bean.getAttributes().getConcentration() );
                setIntParameter(ps, index++, bean.getAttributes().getExperience() );
                setIntParameter(ps, index++, bean.getAttributes().getMotivation() );
                setIntParameter(ps, index++, bean.getAttributes().getOverall() );
                setIntParameter(ps, index++, bean.getAttributes().getReputation() );
                setIntParameter(ps, index++, bean.getAttributes().getStamina() );
                setIntParameter(ps, index++, bean.getAttributes().getTalent() );
                setIntParameter(ps, index++, bean.getAttributes().getTechInsight() );
                setIntParameter(ps, index++, bean.getAttributes().getWeight() );
                setStringParameter(ps, index++, bean.getName() );
                setIntParameter(ps, index++, bean.getId() );
                result = ps.executeUpdate();

                List<Track> stracks = saved.getFavoriteTracks();

                // hmmm... reviewing this code, it looks wrong, but will not change it right now
                // it seems to assume the favorite tracks will always be in the same order
                for ( int i = 0; i < bean.getFavoriteTracks().size(); i++ ) {
                    Track newTrack = bean.getFavoriteTracks().get( index );
                    if ( i < stracks.size() ) {
                        Track strack = stracks.get( i );
                        if ( !strack.equals( newTrack ) ) {
                            ftDAO.delete( bean.getId(), strack.getId(), conn );
                            ftDAO.create( bean.getId(), newTrack.getId(), conn );
                        }
                    } else {
                        ftDAO.create( bean.getId(), newTrack.getId(), conn );
                    }
                }
                for ( int i = bean.getFavoriteTracks().size(); i < stracks.size(); i++ ) {
                    Track track = stracks.get( i );
                    ftDAO.delete( bean.getId(), track.getId(), conn );
                }
            }
            return result;
        } finally {
            close( ps );
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key,
                       Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            Driver driver = load( key, conn );
            for ( Track track : driver.getFavoriteTracks() ) {
                ftDAO.delete( driver.getId(), track.getId(), conn );
            }

            ps = conn.prepareStatement( SQL_DELETE );
            ps.setInt( 1, key );
            ps.executeUpdate();
        } finally {
            close( ps );
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<Driver> getResults(ResultSet rs,
                                    Connection conn) throws SQLException {
        List<Driver> results = new ArrayList<Driver>();
        while ( rs.next() ) {
            Driver bean = new Driver();
            bean.setId( rs.getInt( "ID" ) );
            bean.setNumber( rs.getInt( "NUMBER" ) );
            bean.getAttributes().setAge( getIntOrNull( rs, "AGE" ) );
            bean.getAttributes().setAggressiveness( getIntOrNull( rs, "AGGRESSIVENESS" ) );
            bean.getAttributes().setCharisma( getIntOrNull( rs, "CHARISMA" ) );
            bean.getAttributes().setConcentration( getIntOrNull( rs, "CONCENTRATION" ) );
            bean.getAttributes().setExperience( getIntOrNull( rs, "EXPERIENCE" ) );
            bean.getAttributes().setMotivation( getIntOrNull( rs, "MOTIVATION" ) );
            bean.getAttributes().setOverall( getIntOrNull( rs, "OVERALL" ) );
            bean.getAttributes().setReputation( getIntOrNull( rs, "REPUTATION" ) );
            bean.getAttributes().setStamina( getIntOrNull( rs, "STAMINA" ) );
            bean.getAttributes().setTalent( getIntOrNull( rs, "TALENT" ) );
            bean.getAttributes().setTechInsight( getIntOrNull( rs, "TECH_INSIGHT" ) );
            bean.getAttributes().setWeight( getIntOrNull( rs, "WEIGHT" ) );
            bean.setName( rs.getString( "NAME" ) );

            List<Track> tracks = ftDAO.loadFavoriteTracks( bean.getId(), conn );
            bean.setFavoriteTracks( tracks );

            results.add( bean );
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if ( stmt != null ) {
            try {
                stmt.close();
            } catch ( SQLException e ) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if ( rs != null ) {
            try {
                rs.close();
            } catch ( SQLException e ) {
            }
        }
    }
}