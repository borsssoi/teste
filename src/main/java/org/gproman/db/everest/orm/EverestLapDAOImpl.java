/*
 * This java source file is generated by DAO4J v1.18
 * Generated on Fri Jan 04 19:21:50 EST 2013
 * For more information, please contact b-i-d@163.com
 * Please check http://members.lycos.co.uk/dao4j/ for the latest version.
 */

package org.gproman.db.everest.orm;

import static org.gproman.db.DBUtil.getIntOrNull;
import static org.gproman.db.DBUtil.setIntParameter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.gproman.db.everest.dao.EverestLapDAO;
import org.gproman.model.everest.NormalizedLap;
import org.gproman.model.race.Tyre;
import org.gproman.model.race.Weather;

/**
 * This class provides methods to populate DB Table of LAP
 */
public class EverestLapDAOImpl implements EverestLapDAO {

    public static final EverestLapDAO INSTANCE    = new EverestLapDAOImpl();

    /* SQL to insert data */
    private static final String       SQL_INSERT  =
                                                          "INSERT INTO LAP ("
                                                                  + "NUMBER, POSITION, TIME, WEATHER, "
                                                                  + "TEMPERATURE, HUMIDITY, TYRE, EVENTS "
                                                                  + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String       SQL_SELECT  =
                                                          "SELECT "
                                                                  + "ID, NUMBER, POSITION, TIME, WEATHER, "
                                                                  + "TEMPERATURE, HUMIDITY, TYRE, EVENTS "
                                                                  + "FROM LAP WHERE "
                                                                  + "ID = ?";

    /* SQL to update data */
    private static final String       SQL_UPDATE  =
                                                          "UPDATE LAP SET "
                                                                  + "NUMBER = ?, POSITION = ?, TIME = ?, WEATHER = ?, "
                                                                  + "TEMPERATURE = ?, HUMIDITY = ?, TYRE = ?, EVENTS = ? "
                                                                  + "WHERE "
                                                                  + "ID = ?";

    /* SQL to delete data */
    private static final String       SQL_DELETE  =
                                                          "DELETE FROM LAP WHERE ID = ?";

    private EverestLapDAOImpl() {
    }

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(NormalizedLap bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            int index = 1;
            setIntParameter(ps, index++, bean.getNumber());
            setIntParameter(ps, index++, bean.getPosition());
            setIntParameter(ps, index++, bean.getTime());
            ps.setString(index++, bean.getWeather() != null ? bean.getWeather().toString() : null);
            setIntParameter(ps, index++, bean.getTemperature());
            setIntParameter(ps, index++, bean.getHumidity());
            ps.setString(index++, bean.getTyre() != null ? bean.getTyre().toString() : null);
            ps.setString(index++, bean.getEvents());
            ps.executeUpdate();
            
            ResultSet generatedKeys = ps.getGeneratedKeys();
            if (generatedKeys.next()) {
                bean.setId(generatedKeys.getInt(1));
            }
        } finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public NormalizedLap load(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List<NormalizedLap> results = getResults(rs, conn);
            if (results.size() > 0)
                return results.get(0);
            else
                return null;
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(NormalizedLap bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            int index = 1;
            setIntParameter(ps, index++, bean.getNumber());
            setIntParameter(ps, index++, bean.getPosition());
            setIntParameter(ps, index++, bean.getTime());
            ps.setString(index++, bean.getWeather() != null ? bean.getWeather().toString() : null);
            setIntParameter(ps, index++, bean.getTemperature());
            setIntParameter(ps, index++, bean.getHumidity());
            ps.setString(index++, bean.getTyre() != null ? bean.getTyre().toString() : null);
            ps.setString(index++, bean.getEvents());
            ps.setInt(index++, bean.getId());
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(Integer key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        } finally {
            close(ps);
        }
    }

    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    private List<NormalizedLap> getResults(ResultSet rs, Connection conn) throws SQLException {
        List<NormalizedLap> results = new ArrayList<NormalizedLap>();
        while (rs.next()) {
            NormalizedLap bean = new NormalizedLap();
            bean.setId(rs.getInt("ID"));
            bean.setNumber(getIntOrNull(rs, "NUMBER"));
            bean.setPosition(getIntOrNull(rs, "POSITION"));
            bean.setTime(getIntOrNull(rs, "TIME"));
            String weather = rs.getString("WEATHER");
            bean.setWeather(weather != null ? Weather.valueOf(weather) : null);
            bean.setTemperature(getIntOrNull(rs, "TEMPERATURE"));
            bean.setHumidity(getIntOrNull(rs, "HUMIDITY"));
            String tyre = rs.getString("TYRE");
            bean.setTyre(tyre != null ? Tyre.valueOf(tyre) : null);
            bean.setEvents(rs.getString("EVENTS"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }
}